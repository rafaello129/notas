{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%202%20Gu%C3%ADa/","title":"Semana 2: Autenticaci\u00f3n y Autorizaci\u00f3n con NestJS","text":"<ul> <li>Autenticaci\u00f3n: Proceso de verificar la identidad del usuario. Asegura que quien intenta acceder es quien dice ser.</li> <li>Autorizaci\u00f3n: Proceso de verificar los permisos del usuario autenticado para acceder a recursos espec\u00edficos.</li> </ul>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%202%20Gu%C3%ADa/#modulo-de-usuarios-users","title":"M\u00f3dulo de Usuarios (Users)","text":"<p>Para manejar la autenticaci\u00f3n, necesitamos un m\u00f3dulo que gestione a los usuarios de nuestra aplicaci\u00f3n.</p>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%202%20Gu%C3%ADa/#creacion-del-modulo","title":"Creaci\u00f3n del M\u00f3dulo","text":"<p>Utilizaremos el CLI de NestJS para generar el m\u00f3dulo de usuarios:</p> <pre><code>nest generate module users\n</code></pre> <p>Esto crea un archivo <code>users.module.ts</code> que ser\u00e1 el n\u00facleo de nuestro m\u00f3dulo de usuarios.</p>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%202%20Gu%C3%ADa/#definicion-de-la-entidad-usuario","title":"Definici\u00f3n de la Entidad Usuario","text":"<p>Crearemos una entidad <code>User</code> que representar\u00e1 a los usuarios en nuestra base de datos.</p> <p>users/entities/user.entity.ts</p> <pre><code>import { Entity, PrimaryGeneratedColumn, Column } from 'typeorm';\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ unique: true })\n  username: string;\n\n  @Column()\n  password: string;\n}\n</code></pre> <ul> <li>Decoradores de TypeORM:</li> <li><code>@Entity()</code>: Indica que esta clase es una entidad de base de datos.</li> <li><code>@PrimaryGeneratedColumn()</code>: Clave primaria autogenerada.</li> <li><code>@Column()</code>: Define una columna en la tabla.</li> <li>Propiedades:</li> <li><code>username</code>: Nombre de usuario \u00fanico.</li> <li><code>password</code>: Contrase\u00f1a del usuario (ser\u00e1 almacenada de forma segura).</li> </ul>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%202%20Gu%C3%ADa/#implementacion-del-servicio-de-usuarios","title":"Implementaci\u00f3n del Servicio de Usuarios","text":"<p>Creamos un servicio para manejar la l\u00f3gica de negocio relacionada con los usuarios.</p> <p>Generar el servicio:</p> <pre><code>nest generate service users\n</code></pre> <p>users/users.service.ts</p> <pre><code>import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { User } from './entities/user.entity';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectRepository(User)\n    private usersRepository: Repository&lt;User&gt;,\n  ) {}\n\n  async findOne(username: string): Promise&lt;User | undefined&gt; {\n    return this.usersRepository.findOneBy({ username });\n  }\n\n  async create(user: Partial&lt;User&gt;): Promise&lt;User&gt; {\n    const newUser = this.usersRepository.create(user);\n    return this.usersRepository.save(newUser);\n  }\n\n  // Otros m\u00e9todos seg\u00fan sea necesario\n}\n</code></pre> <ul> <li>Inyecci\u00f3n del Repositorio: Utilizamos <code>@InjectRepository</code> para acceder al repositorio de la entidad <code>User</code>.</li> <li>M\u00e9todos del Servicio:</li> <li><code>findOne()</code>: Busca un usuario por nombre de usuario.</li> <li><code>create()</code>: Crea un nuevo usuario.</li> </ul>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%202%20Gu%C3%ADa/#actualizacion-del-modulo-de-usuarios","title":"Actualizaci\u00f3n del M\u00f3dulo de Usuarios","text":"<p>Debemos importar el <code>TypeOrmModule</code> en <code>users.module.ts</code> para que el repositorio est\u00e9 disponible.</p> <p>users/users.module.ts</p> <pre><code>import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UsersService } from './users.service';\nimport { User } from './entities/user.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User])],\n  providers: [UsersService],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n</code></pre> <ul> <li>imports: Importamos <code>TypeOrmModule.forFeature([User])</code> para registrar el repositorio de <code>User</code>.</li> <li>exports: Exportamos <code>UsersService</code> para que pueda ser utilizado en otros m\u00f3dulos.</li> </ul>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%202%20Gu%C3%ADa/#modulo-de-autenticacion-auth","title":"M\u00f3dulo de Autenticaci\u00f3n (Auth)","text":"<p>Crearemos un m\u00f3dulo dedicado a la autenticaci\u00f3n que gestionar\u00e1 el proceso de login y registro.</p>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%202%20Gu%C3%ADa/#creacion-del-modulo-y-controlador","title":"Creaci\u00f3n del M\u00f3dulo y Controlador","text":"<p>Utilizamos el CLI de NestJS para generar el m\u00f3dulo y el controlador de autenticaci\u00f3n:</p> <pre><code>nest generate module auth\nnest generate controller auth\nnest generate service auth\n</code></pre> <p>Esto crea los archivos <code>auth.module.ts</code>, <code>auth.controller.ts</code> y <code>auth.service.ts</code>.</p>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%202%20Gu%C3%ADa/#configuracion-de-dependencias","title":"Configuraci\u00f3n de Dependencias","text":"<p>En <code>auth.module.ts</code>, importamos el m\u00f3dulo de usuarios y otros m\u00f3dulos necesarios:</p> <p>auth/auth.module.ts</p> <pre><code>import { Module } from '@nestjs/common';\nimport { UsersModule } from '../users/users.module';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\n\n@Module({\n  imports: [UsersModule],\n  providers: [AuthService],\n  controllers: [AuthController],\n})\nexport class AuthModule {}\n</code></pre> <ul> <li>imports: Importamos <code>UsersModule</code> para acceder al servicio de usuarios.</li> <li>providers: Registramos <code>AuthService</code>.</li> <li>controllers: Registramos <code>AuthController</code>.</li> </ul>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%202%20Gu%C3%ADa/#registro-de-usuarios-register","title":"Registro de Usuarios (Register)","text":"<p>Implementaremos la funcionalidad para que nuevos usuarios puedan registrarse en nuestra aplicaci\u00f3n.</p>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%202%20Gu%C3%ADa/#creacion-del-dto-de-registro","title":"Creaci\u00f3n del DTO de Registro","text":"<p>Definimos un DTO (Data Transfer Object) para validar los datos de registro.</p> <p>auth/dto/register-auth.dto.ts</p> <pre><code>import { IsString, MinLength } from 'class-validator';\n\nexport class RegisterAuthDto {\n  @IsString()\n  username: string;\n\n  @IsString()\n  @MinLength(6)\n  password: string;\n}\n</code></pre> <ul> <li>Decoradores de Validaci\u00f3n:</li> <li><code>@IsString()</code>: Valida que el campo sea una cadena de texto.</li> <li><code>@MinLength(6)</code>: Valida que la contrase\u00f1a tenga al menos 6 caracteres.</li> </ul>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%202%20Gu%C3%ADa/#implementacion-del-metodo-de-registro","title":"Implementaci\u00f3n del M\u00e9todo de Registro","text":"<p>En <code>AuthService</code>, creamos un m\u00e9todo <code>register</code> que utiliza <code>UsersService</code> para crear un nuevo usuario.</p> <p>auth/auth.service.ts</p> <pre><code>import { Injectable } from '@nestjs/common';\nimport { UsersService } from '../users/users.service';\nimport { RegisterAuthDto } from './dto/register-auth.dto';\n\n@Injectable()\nexport class AuthService {\n  constructor(private usersService: UsersService) {}\n\n  async register(registerAuthDto: RegisterAuthDto) {\n    const userExists = await this.usersService.findOne(registerAuthDto.username);\n    if (userExists) {\n      throw new Error('El usuario ya existe');\n    }\n    return this.usersService.create(registerAuthDto);\n  }\n}\n</code></pre> <ul> <li>Validaci\u00f3n de Usuario Existente: Verificamos si el nombre de usuario ya est\u00e1 en uso.</li> <li>Creaci\u00f3n del Usuario: Utilizamos <code>usersService.create</code> para crear el nuevo usuario.</li> </ul> <p>En <code>AuthController</code>, creamos el endpoint para el registro.</p> <p>auth/auth.controller.ts</p> <pre><code>import { Controller, Post, Body } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { RegisterAuthDto } from './dto/register-auth.dto';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @Post('register')\n  async register(@Body() registerAuthDto: RegisterAuthDto) {\n    return this.authService.register(registerAuthDto);\n  }\n}\n</code></pre> <ul> <li>Endpoint <code>/auth/register</code>: Maneja las solicitudes POST para registrar nuevos usuarios.</li> </ul>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%202%20Gu%C3%ADa/#hash-de-contrasena","title":"Hash de Contrase\u00f1a","text":"<p>Es fundamental no almacenar contrase\u00f1as en texto plano por razones de seguridad. Utilizaremos bcrypt para encriptar las contrase\u00f1as antes de guardarlas.</p>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%202%20Gu%C3%ADa/#uso-de-bcrypt","title":"Uso de Bcrypt","text":"<p>Instalaci\u00f3n:</p> <pre><code>npm install bcrypt\nnpm install -D @types/bcrypt\n</code></pre>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%202%20Gu%C3%ADa/#implementacion-del-hashing","title":"Implementaci\u00f3n del Hashing","text":"<p>Modificamos el m\u00e9todo <code>register</code> en <code>AuthService</code> para hashear la contrase\u00f1a.</p> <p>auth/auth.service.ts</p> <pre><code>import * as bcrypt from 'bcrypt';\n\n@Injectable()\nexport class AuthService {\n  // ...\n\n  async register(registerAuthDto: RegisterAuthDto) {\n    const { username, password } = registerAuthDto;\n    const userExists = await this.usersService.findOne(username);\n    if (userExists) {\n      throw new Error('El usuario ya existe');\n    }\n    const hashedPassword = await bcrypt.hash(password, 10);\n    return this.usersService.create({\n      username,\n      password: hashedPassword,\n    });\n  }\n}\n</code></pre> <ul> <li>bcrypt.hash(): Genera un hash seguro de la contrase\u00f1a con un salt de 10 rondas.</li> <li>Almacenamiento Seguro: Solo guardamos el hash de la contrase\u00f1a en la base de datos.</li> </ul>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%202%20Gu%C3%ADa/#autenticacion-login","title":"Autenticaci\u00f3n (Login)","text":"<p>Implementaremos el proceso de login, validando las credenciales del usuario.</p>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%202%20Gu%C3%ADa/#creacion-del-dto-de-login","title":"Creaci\u00f3n del DTO de Login","text":"<p>Definimos un DTO para validar los datos de login.</p> <p>auth/dto/login-auth.dto.ts</p> <pre><code>import { IsString } from 'class-validator';\n\nexport class LoginAuthDto {\n  @IsString()\n  username: string;\n\n  @IsString()\n  password: string;\n}\n</code></pre>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%202%20Gu%C3%ADa/#validacion-de-credenciales","title":"Validaci\u00f3n de Credenciales","text":"<p>En <code>AuthService</code>, creamos el m\u00e9todo <code>login</code> que verifica las credenciales del usuario.</p> <p>auth/auth.service.ts</p> <pre><code>async login(loginAuthDto: LoginAuthDto) {\n  const { username, password } = loginAuthDto;\n  const user = await this.usersService.findOne(username);\n  if (!user) {\n    throw new Error('Usuario no encontrado');\n  }\n  const isMatch = await bcrypt.compare(password, user.password);\n  if (!isMatch) {\n    throw new Error('Contrase\u00f1a incorrecta');\n  }\n  // Generar y devolver un token (JWT)\n}\n</code></pre> <ul> <li>bcrypt.compare(): Compara la contrase\u00f1a proporcionada con el hash almacenado.</li> <li>Validaci\u00f3n de Usuario y Contrase\u00f1a: Asegura que las credenciales sean correctas antes de proceder.</li> </ul> <p>En <code>AuthController</code>, creamos el endpoint para el login.</p> <p>auth/auth.controller.ts</p> <pre><code>@Post('login')\nasync login(@Body() loginAuthDto: LoginAuthDto) {\n  return this.authService.login(loginAuthDto);\n}\n</code></pre>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%202%20Gu%C3%ADa/#jwt-json-web-tokens","title":"JWT (JSON Web Tokens)","text":"<p>Utilizaremos JWT para generar tokens que permitan a los usuarios autenticarse y acceder a recursos protegidos.</p>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%202%20Gu%C3%ADa/#configuracion-del-modulo-jwt","title":"Configuraci\u00f3n del M\u00f3dulo JWT","text":"<p>Instalaci\u00f3n:</p> <pre><code>npm install @nestjs/jwt passport-jwt\nnpm install -D @types/passport-jwt\n</code></pre> <p>En <code>auth.module.ts</code>, importamos y configuramos el m\u00f3dulo JWT.</p> <p>auth/auth.module.ts</p> <pre><code>import { JwtModule } from '@nestjs/jwt';\n\n@Module({\n  imports: [\n    UsersModule,\n    JwtModule.register({\n      secret: 'SECRET_KEY', // Reemplazar por una clave m\u00e1s segura y almacenarla en variables de entorno\n      signOptions: { expiresIn: '1h' },\n    }),\n  ],\n  // ...\n})\nexport class AuthModule {}\n</code></pre> <ul> <li>secret: Clave secreta para firmar los tokens (debe ser segura y estar en variables de entorno).</li> <li>signOptions: Opciones como tiempo de expiraci\u00f3n del token.</li> </ul>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%202%20Gu%C3%ADa/#generacion-de-tokens","title":"Generaci\u00f3n de Tokens","text":"<p>Modificamos el m\u00e9todo <code>login</code> para generar y devolver un token JWT.</p> <p>auth/auth.service.ts</p> <pre><code>import { JwtService } from '@nestjs/jwt';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private usersService: UsersService,\n    private jwtService: JwtService,\n  ) {}\n\n  async login(loginAuthDto: LoginAuthDto) {\n    // ... Validaci\u00f3n de credenciales\n\n    const payload = { username: user.username, sub: user.id };\n    return {\n      access_token: this.jwtService.sign(payload),\n    };\n  }\n}\n</code></pre> <ul> <li>jwtService.sign(): Genera un token JWT con el payload proporcionado.</li> <li>Payload: Informaci\u00f3n que se incluye en el token (evitar informaci\u00f3n sensible).</li> </ul>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%202%20Gu%C3%ADa/#autorizacion-guard","title":"Autorizaci\u00f3n (Guard)","text":"<p>Para proteger rutas y asegurarnos de que solo usuarios autenticados accedan a ciertos recursos, utilizaremos Guards.</p>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%202%20Gu%C3%ADa/#implementacion-de-guards","title":"Implementaci\u00f3n de Guards","text":"<p>NestJS utiliza Passport para manejar la autenticaci\u00f3n con JWT.</p> <p>Instalaci\u00f3n:</p> <pre><code>npm install passport\nnpm install @nestjs/passport\n</code></pre> <p>Creamos un guard que utilice la estrategia de JWT.</p> <p>auth/jwt-auth.guard.ts</p> <pre><code>import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n</code></pre> <p>Definimos la estrategia JWT.</p> <p>auth/jwt.strategy.ts</p> <pre><code>import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy, ExtractJwt } from 'passport-jwt';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: 'SECRET_KEY', // Debe coincidir con la clave usada para firmar\n    });\n  }\n\n  async validate(payload: any) {\n    return { userId: payload.sub, username: payload.username };\n  }\n}\n</code></pre> <ul> <li>jwtFromRequest: Especifica c\u00f3mo extraer el token de la solicitud (en este caso, del encabezado <code>Authorization</code>).</li> <li>validate(): M\u00e9todo que verifica el token y devuelve los datos del usuario.</li> </ul>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%202%20Gu%C3%ADa/#proteccion-de-rutas","title":"Protecci\u00f3n de Rutas","text":"<p>En <code>cats.controller.ts</code>, protegemos las rutas utilizando el guard.</p> <p>cats/cats.controller.ts</p> <pre><code>import { Controller, Get, UseGuards } from '@nestjs/common';\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\n\n@Controller('cats')\nexport class CatsController {\n  // ...\n\n  @UseGuards(JwtAuthGuard)\n  @Get()\n  findAll() {\n    // Solo usuarios autenticados pueden acceder\n    return this.catsService.findAll();\n  }\n}\n</code></pre> <ul> <li>@UseGuards(JwtAuthGuard): Indica que esta ruta est\u00e1 protegida y requiere autenticaci\u00f3n.</li> </ul>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%202%20Gu%C3%ADa/#recursos-adicionales","title":"Recursos Adicionales","text":"<ul> <li>Documentaci\u00f3n Oficial de NestJS</li> <li>Passport y JWT en NestJS</li> <li>TypeORM Relations</li> <li>Bcrypt Documentation</li> </ul>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%203%20Gu%C3%ADa/","title":"Autorizaci\u00f3n (Roles) con NestJS","text":"<p>Nos enfocaremos en la autorizaci\u00f3n, es decir, controlar el acceso a recursos seg\u00fan los roles de usuario.</p>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%203%20Gu%C3%ADa/#user-role-y-jwt-payload","title":"User Role y JWT Payload","text":""},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%203%20Gu%C3%ADa/#anadiendo-roles-a-los-usuarios","title":"A\u00f1adiendo Roles a los Usuarios","text":"<p>Para implementar la autorizaci\u00f3n basada en roles, primero debemos asociar roles a nuestros usuarios.</p>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%203%20Gu%C3%ADa/#modificar-la-entidad-user","title":"Modificar la Entidad <code>User</code>","text":"<p>Agregamos una nueva propiedad <code>role</code> a nuestra entidad <code>User</code>.</p> <p>users/entities/user.entity.ts</p> <pre><code>import { Entity, PrimaryGeneratedColumn, Column } from 'typeorm';\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ unique: true })\n  username: string;\n\n  @Column()\n  password: string;\n\n  @Column({ default: 'user' })\n  role: string;\n}\n</code></pre> <ul> <li><code>role</code>: Indica el rol del usuario. Puede ser <code>'user'</code>, <code>'admin'</code>, etc.</li> <li><code>default: 'user'</code>: Establece el rol por defecto como <code>'user'</code>.</li> </ul>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%203%20Gu%C3%ADa/#incluyendo-el-rol-en-el-payload-del-jwt","title":"Incluyendo el Rol en el Payload del JWT","text":"<p>Cuando generamos el token JWT, podemos incluir informaci\u00f3n adicional en el payload.</p>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%203%20Gu%C3%ADa/#modificar-el-metodo-login-en-authservice","title":"Modificar el M\u00e9todo <code>login</code> en <code>AuthService</code>","text":"<p>auth/auth.service.ts</p> <pre><code>async login(loginAuthDto: LoginAuthDto) {\n  // ... Validaci\u00f3n de credenciales\n\n  const payload = { username: user.username, sub: user.id, role: user.role };\n  return {\n    access_token: this.jwtService.sign(payload),\n  };\n}\n</code></pre> <ul> <li><code>role: user.role</code>: A\u00f1adimos el rol del usuario al payload del token.</li> </ul>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%203%20Gu%C3%ADa/#actualizar-la-estrategia-jwt","title":"Actualizar la Estrategia JWT","text":"<p>Necesitamos asegurarnos de que el rol est\u00e9 disponible en el contexto de la solicitud.</p> <p>auth/jwt.strategy.ts</p> <pre><code>async validate(payload: any) {\n  return { userId: payload.sub, username: payload.username, role: payload.role };\n}\n</code></pre> <ul> <li>Ahora, el objeto <code>req.user</code> incluir\u00e1 <code>userId</code>, <code>username</code> y <code>role</code>.</li> </ul>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%203%20Gu%C3%ADa/#verificacion-manual-de-rol-admin","title":"Verificaci\u00f3n Manual de Rol Admin","text":""},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%203%20Gu%C3%ADa/#control-de-acceso-en-el-controlador","title":"Control de Acceso en el Controlador","text":"<p>Podemos verificar el rol del usuario directamente en el controlador para proteger ciertas rutas.</p>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%203%20Gu%C3%ADa/#ejemplo-en-catscontroller","title":"Ejemplo en <code>CatsController</code>","text":"<p>cats/cats.controller.ts</p> <pre><code>import { Controller, Get, UseGuards, Request, ForbiddenException } from '@nestjs/common';\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\n\n@Controller('cats')\nexport class CatsController {\n  @UseGuards(JwtAuthGuard)\n  @Get('admin')\n  findAllAdmin(@Request() req) {\n    if (req.user.role !== 'admin') {\n      throw new ForbiddenException('Access denied');\n    }\n    // C\u00f3digo para usuarios con rol admin\n    return this.catsService.findAll();\n  }\n}\n</code></pre> <ul> <li>Verificaci\u00f3n del Rol: Comprobamos si <code>req.user.role</code> es <code>'admin'</code>.</li> <li>Manejo de Excepciones: Si el rol no es <code>'admin'</code>, lanzamos una <code>ForbiddenException</code>.</li> </ul>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%203%20Gu%C3%ADa/#limitaciones","title":"Limitaciones","text":"<ul> <li>Repetitivo: Tener que verificar manualmente el rol en cada ruta puede ser tedioso y propenso a errores.</li> <li>Mejoras: Podemos crear un Guard personalizado para manejar esta l\u00f3gica de manera centralizada.</li> </ul>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%203%20Gu%C3%ADa/#decorador-personalizado","title":"Decorador Personalizado","text":""},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%203%20Gu%C3%ADa/#creando-un-decorador-roles","title":"Creando un Decorador <code>Roles</code>","text":"<p>Para simplificar la asignaci\u00f3n de roles a las rutas, podemos crear un decorador personalizado.</p>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%203%20Gu%C3%ADa/#definir-el-decorador-roles","title":"Definir el Decorador <code>Roles</code>","text":"<p>auth/roles.decorator.ts</p> <pre><code>import { SetMetadata } from '@nestjs/common';\n\nexport const ROLES_KEY = 'roles';\nexport const Roles = (...roles: string[]) =&gt; SetMetadata(ROLES_KEY, roles);\n</code></pre> <ul> <li><code>SetMetadata</code>: Funci\u00f3n que asigna metadatos a una ruta.</li> <li><code>ROLES_KEY</code>: Clave utilizada para acceder a los metadatos.</li> <li><code>Roles</code>: Decorador que acepta una lista de roles.</li> </ul>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%203%20Gu%C3%ADa/#uso-del-decorador-en-el-controlador","title":"Uso del Decorador en el Controlador","text":"<p>cats/cats.controller.ts</p> <pre><code>import { Controller, Get, UseGuards } from '@nestjs/common';\nimport { Roles } from '../auth/roles.decorator';\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\n\n@Controller('cats')\nexport class CatsController {\n  @UseGuards(JwtAuthGuard)\n  @Roles('admin')\n  @Get('admin')\n  findAllAdmin() {\n    // C\u00f3digo para usuarios con rol admin\n    return this.catsService.findAll();\n  }\n}\n</code></pre> <ul> <li><code>@Roles('admin')</code>: Especificamos que esta ruta requiere el rol <code>'admin'</code>.</li> </ul>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%203%20Gu%C3%ADa/#necesidad-de-un-guard-personalizado","title":"Necesidad de un Guard Personalizado","text":"<p>El decorador por s\u00ed solo no es suficiente; necesitamos un guard que interprete los metadatos y realice la verificaci\u00f3n.</p>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%203%20Gu%C3%ADa/#roles-guard","title":"Roles Guard","text":""},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%203%20Gu%C3%ADa/#implementacion-del-guard-de-roles","title":"Implementaci\u00f3n del Guard de Roles","text":"<p>Crearemos un guard que verifique los roles antes de permitir el acceso a una ruta.</p>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%203%20Gu%C3%ADa/#definir-el-guard-rolesguard","title":"Definir el Guard <code>RolesGuard</code>","text":"<p>auth/roles.guard.ts</p> <pre><code>import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { ROLES_KEY } from './roles.decorator';\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const requiredRoles = this.reflector.getAllAndOverride&lt;string[]&gt;(ROLES_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    if (!requiredRoles) {\n      return true; // Si no hay roles definidos, permitir acceso\n    }\n    const { user } = context.switchToHttp().getRequest();\n    return requiredRoles.includes(user.role);\n  }\n}\n</code></pre> <ul> <li><code>Reflector</code>: Servicio para acceder a los metadatos.</li> <li><code>canActivate</code>: M\u00e9todo que determina si el usuario tiene acceso.</li> <li><code>requiredRoles</code>: Obtenemos los roles requeridos de los metadatos.</li> </ul>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%203%20Gu%C3%ADa/#aplicacion-del-guard-en-el-controlador","title":"Aplicaci\u00f3n del Guard en el Controlador","text":"<p>cats/cats.controller.ts</p> <pre><code>import { Controller, Get, UseGuards } from '@nestjs/common';\nimport { Roles } from '../auth/roles.decorator';\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\nimport { RolesGuard } from '../auth/roles.guard';\n\n@Controller('cats')\n@UseGuards(JwtAuthGuard, RolesGuard)\nexport class CatsController {\n  @Roles('admin')\n  @Get('admin')\n  findAllAdmin() {\n    return this.catsService.findAll();\n  }\n\n  @Roles('user', 'admin')\n  @Get()\n  findAll() {\n    return this.catsService.findAll();\n  }\n}\n</code></pre> <ul> <li><code>@UseGuards(JwtAuthGuard, RolesGuard)</code>: Aplica ambos guards a todas las rutas del controlador.</li> <li><code>@Roles(...)</code>: Especifica los roles permitidos para cada ruta.</li> </ul>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%203%20Gu%C3%ADa/#ventajas","title":"Ventajas","text":"<ul> <li>Centralizaci\u00f3n: La l\u00f3gica de autorizaci\u00f3n est\u00e1 centralizada en el guard.</li> <li>Reutilizaci\u00f3n: Podemos aplicar el guard a m\u00faltiples controladores o rutas.</li> </ul>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%203%20Gu%C3%ADa/#enums-en-typescript","title":"Enums en TypeScript","text":""},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%203%20Gu%C3%ADa/#uso-de-enums-para-roles","title":"Uso de Enums para Roles","text":"<p>Para evitar errores tipogr\u00e1ficos y facilitar la gesti\u00f3n de roles, utilizamos Enums en TypeScript.</p>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%203%20Gu%C3%ADa/#definir-el-enum-role","title":"Definir el Enum <code>Role</code>","text":"<p>auth/roles.enum.ts</p> <pre><code>export enum Role {\n  User = 'user',\n  Admin = 'admin',\n}\n</code></pre>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%203%20Gu%C3%ADa/#actualizar-el-decorador-y-el-guard","title":"Actualizar el Decorador y el Guard","text":""},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%203%20Gu%C3%ADa/#modificar-el-decorador-roles","title":"Modificar el Decorador <code>Roles</code>","text":"<p>auth/roles.decorator.ts</p> <pre><code>import { SetMetadata } from '@nestjs/common';\nimport { Role } from './roles.enum';\n\nexport const Roles = (...roles: Role[]) =&gt; SetMetadata(ROLES_KEY, roles);\n</code></pre>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%203%20Gu%C3%ADa/#modificar-el-guard-rolesguard","title":"Modificar el Guard <code>RolesGuard</code>","text":"<p>El guard permanece igual, pero ahora trabaja con valores del enum.</p>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%203%20Gu%C3%ADa/#actualizar-el-controlador","title":"Actualizar el Controlador","text":"<p>cats/cats.controller.ts</p> <pre><code>import { Controller, Get, UseGuards } from '@nestjs/common';\nimport { Roles } from '../auth/roles.decorator';\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\nimport { RolesGuard } from '../auth/roles.guard';\nimport { Role } from '../auth/roles.enum';\n\n@Controller('cats')\n@UseGuards(JwtAuthGuard, RolesGuard)\nexport class CatsController {\n  @Roles(Role.Admin)\n  @Get('admin')\n  findAllAdmin() {\n    return this.catsService.findAll();\n  }\n\n  @Roles(Role.User, Role.Admin)\n  @Get()\n  findAll() {\n    return this.catsService.findAll();\n  }\n}\n</code></pre> <ul> <li>Uso del Enum: Utilizamos <code>Role.Admin</code> y <code>Role.User</code> en lugar de cadenas de texto.</li> </ul>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%203%20Gu%C3%ADa/#unir-varios-decoradores","title":"Unir Varios Decoradores","text":""},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%203%20Gu%C3%ADa/#combinacion-de-decoradores","title":"Combinaci\u00f3n de Decoradores","text":"<p>Para simplificar a\u00fan m\u00e1s, podemos crear un decorador que combine la aplicaci\u00f3n de los guards y la asignaci\u00f3n de roles.</p>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%203%20Gu%C3%ADa/#crear-un-decorador-auth","title":"Crear un Decorador <code>Auth</code>","text":"<p>auth/auth.decorator.ts</p> <pre><code>import { applyDecorators, UseGuards } from '@nestjs/common';\nimport { Roles } from './roles.decorator';\nimport { JwtAuthGuard } from './jwt-auth.guard';\nimport { RolesGuard } from './roles.guard';\n\nexport function Auth(...roles: Role[]) {\n  return applyDecorators(\n    Roles(...roles),\n    UseGuards(JwtAuthGuard, RolesGuard),\n  );\n}\n</code></pre> <ul> <li><code>applyDecorators</code>: Permite combinar m\u00faltiples decoradores en uno solo.</li> </ul>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%203%20Gu%C3%ADa/#uso-del-decorador-auth","title":"Uso del Decorador <code>Auth</code>","text":"<p>cats/cats.controller.ts</p> <pre><code>import { Controller, Get } from '@nestjs/common';\nimport { Auth } from '../auth/auth.decorator';\nimport { Role } from '../auth/roles.enum';\n\n@Controller('cats')\nexport class CatsController {\n  @Auth(Role.Admin)\n  @Get('admin')\n  findAllAdmin() {\n    return this.catsService.findAll();\n  }\n\n  @Auth(Role.User, Role.Admin)\n  @Get()\n  findAll() {\n    return this.catsService.findAll();\n  }\n}\n</code></pre> <ul> <li>Ahora, con un solo decorador, aplicamos la autenticaci\u00f3n y autorizaci\u00f3n.</li> </ul>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%203%20Gu%C3%ADa/#ocultar-contrasena","title":"Ocultar Contrase\u00f1a","text":""},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%203%20Gu%C3%ADa/#excluir-la-contrasena-al-devolver-el-usuario","title":"Excluir la Contrase\u00f1a al Devolver el Usuario","text":"<p>Es una mala pr\u00e1ctica devolver la contrase\u00f1a (aunque est\u00e9 hasheada) en las respuestas de la API.</p>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%203%20Gu%C3%ADa/#utilizar-exclude-de-class-transformer","title":"Utilizar Exclude de <code>class-transformer</code>","text":"<p>users/entities/user.entity.ts</p> <pre><code>import { Exclude } from 'class-transformer';\n\n@Entity()\nexport class User {\n  // ...\n\n  @Exclude()\n  @Column()\n  password: string;\n}\n</code></pre> <ul> <li><code>@Exclude()</code>: Indica que esta propiedad debe excluirse al transformar la entidad en JSON.</li> </ul>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%203%20Gu%C3%ADa/#aplicar-transformacion-en-el-servicio","title":"Aplicar Transformaci\u00f3n en el Servicio","text":"<p>En los m\u00e9todos que devuelven usuarios, utilizamos <code>class-transformer</code> para aplicar la exclusi\u00f3n.</p> <p>users/users.service.ts</p> <pre><code>import { instanceToPlain } from 'class-transformer';\n\nasync findOne(username: string): Promise&lt;User | undefined&gt; {\n  const user = await this.usersRepository.findOneBy({ username });\n  return user ? instanceToPlain(user) : undefined;\n}\n</code></pre>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%203%20Gu%C3%ADa/#enum-roles-en-entidad","title":"Enum Roles en Entidad","text":""},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%203%20Gu%C3%ADa/#definir-el-tipo-de-datos-de-role-en-la-entidad","title":"Definir el Tipo de Datos de <code>role</code> en la Entidad","text":"<p>Podemos indicar que el campo <code>role</code> acepta solo valores definidos en el enum.</p> <p>users/entities/user.entity.ts</p> <pre><code>import { Role } from '../../auth/roles.enum';\n\n@Entity()\nexport class User {\n  // ...\n\n  @Column({\n    type: 'enum',\n    enum: Role,\n    default: Role.User,\n  })\n  role: Role;\n}\n</code></pre> <ul> <li><code>type: 'enum'</code>: Indica que el campo es de tipo enum en la base de datos.</li> <li><code>enum: Role</code>: Especifica el enum a utilizar.</li> </ul>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%203%20Gu%C3%ADa/#ventajas_1","title":"Ventajas","text":"<ul> <li>Integridad de Datos: La base de datos solo aceptar\u00e1 valores definidos en el enum.</li> <li>Consistencia: Facilita el mantenimiento y reduce errores.</li> </ul>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%203%20Gu%C3%ADa/#rol-admin-con-privilegios","title":"Rol Admin con Privilegios","text":""},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%203%20Gu%C3%ADa/#implementacion-de-privilegios-para-el-rol-admin","title":"Implementaci\u00f3n de Privilegios para el Rol Admin","text":"<p>Ahora, aseguraremos que solo los usuarios con rol <code>admin</code> puedan acceder a ciertos recursos, como la creaci\u00f3n de nuevos roles o la gesti\u00f3n de usuarios.</p>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%203%20Gu%C3%ADa/#proteger-rutas-con-el-decorador-auth","title":"Proteger Rutas con el Decorador <code>Auth</code>","text":"<p>users/users.controller.ts</p> <pre><code>import { Controller, Get, Post, Body } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { Auth } from '../auth/auth.decorator';\nimport { Role } from '../auth/roles.enum';\n\n@Controller('users')\nexport class UsersController {\n  constructor(private usersService: UsersService) {}\n\n  @Auth(Role.Admin)\n  @Get()\n  findAll() {\n    return this.usersService.findAll();\n  }\n\n  @Auth(Role.Admin)\n  @Post()\n  create(@Body() createUserDto: CreateUserDto) {\n    return this.usersService.create(createUserDto);\n  }\n}\n</code></pre> <ul> <li>Solo Admin: Solo usuarios con rol <code>admin</code> pueden acceder a estas rutas.</li> </ul>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%203%20Gu%C3%ADa/#decorador-request-user","title":"Decorador Request User","text":""},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%203%20Gu%C3%ADa/#creando-un-decorador-user","title":"Creando un Decorador <code>User</code>","text":"<p>Para acceder al usuario autenticado de manera m\u00e1s sencilla, podemos crear un decorador personalizado.</p>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%203%20Gu%C3%ADa/#definir-el-decorador-user","title":"Definir el Decorador <code>User</code>","text":"<p>auth/user.decorator.ts</p> <pre><code>import { createParamDecorator, ExecutionContext } from '@nestjs/common';\n\nexport const User = createParamDecorator(\n  (data, ctx: ExecutionContext) =&gt; {\n    const request = ctx.switchToHttp().getRequest();\n    return request.user;\n  },\n);\n</code></pre> <ul> <li><code>createParamDecorator</code>: Crea un decorador de par\u00e1metros.</li> <li><code>request.user</code>: Accedemos al usuario autenticado.</li> </ul>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%203%20Gu%C3%ADa/#uso-del-decorador-en-el-controlador_1","title":"Uso del Decorador en el Controlador","text":"<p>cats/cats.controller.ts</p> <pre><code>import { Controller, Get } from '@nestjs/common';\nimport { Auth } from '../auth/auth.decorator';\nimport { User } from '../auth/user.decorator';\n\n@Controller('cats')\nexport class CatsController {\n  @Auth()\n  @Get('profile')\n  getProfile(@User() user) {\n    return user;\n  }\n}\n</code></pre> <ul> <li><code>@User() user</code>: Inyecta el usuario autenticado en el par\u00e1metro <code>user</code>.</li> </ul>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%203%20Gu%C3%ADa/#breed-solo-rol-admin","title":"Breed Solo Rol Admin","text":""},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%203%20Gu%C3%ADa/#control-de-acceso-en-operaciones-especificas","title":"Control de Acceso en Operaciones Espec\u00edficas","text":"<p>Podemos restringir ciertas operaciones, como la creaci\u00f3n de nuevas razas (<code>breed</code>), solo a usuarios con rol <code>admin</code>.</p>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%203%20Gu%C3%ADa/#definir-el-modulo-breeds","title":"Definir el M\u00f3dulo <code>Breeds</code>","text":"<p>Supongamos que tenemos un m\u00f3dulo <code>Breeds</code> para gestionar las razas de gatos.</p> <p>breeds/breeds.controller.ts</p> <pre><code>import { Controller, Post, Body } from '@nestjs/common';\nimport { Auth } from '../auth/auth.decorator';\nimport { Role } from '../auth/roles.enum';\n\n@Controller('breeds')\nexport class BreedsController {\n  @Auth(Role.Admin)\n  @Post()\n  create(@Body() createBreedDto: CreateBreedDto) {\n    // L\u00f3gica para crear una nueva raza\n  }\n}\n</code></pre> <ul> <li>Restricci\u00f3n a Admin: Solo los administradores pueden crear nuevas razas.</li> </ul>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%203%20Gu%C3%ADa/#relacion-entre-cat-y-user","title":"Relaci\u00f3n entre Cat y User","text":""},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%203%20Gu%C3%ADa/#asociar-los-gatos-cat-con-el-usuario-que-los-crea","title":"Asociar los Gatos (<code>Cat</code>) con el Usuario que los Crea","text":"<p>Queremos que cada gato registrado est\u00e9 asociado al usuario que lo cre\u00f3.</p>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%203%20Gu%C3%ADa/#modificar-la-entidad-cat","title":"Modificar la Entidad <code>Cat</code>","text":"<p>cats/entities/cat.entity.ts</p> <pre><code>import { Entity, Column, PrimaryGeneratedColumn, ManyToOne } from 'typeorm';\nimport { User } from '../../users/entities/user.entity';\n\n@Entity()\nexport class Cat {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  name: string;\n\n  // Otras propiedades\n\n  @ManyToOne(() =&gt; User, (user) =&gt; user.cats)\n  owner: User;\n}\n</code></pre> <ul> <li><code>@ManyToOne</code>: Indica una relaci\u00f3n de muchos a uno con <code>User</code>.</li> <li><code>owner</code>: Propiedad que referencia al usuario propietario del gato.</li> </ul>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%203%20Gu%C3%ADa/#modificar-la-entidad-user_1","title":"Modificar la Entidad <code>User</code>","text":"<p>users/entities/user.entity.ts</p> <pre><code>import { OneToMany } from 'typeorm';\nimport { Cat } from '../../cats/entities/cat.entity';\n\n@Entity()\nexport class User {\n  // ...\n\n  @OneToMany(() =&gt; Cat, (cat) =&gt; cat.owner)\n  cats: Cat[];\n}\n</code></pre> <ul> <li><code>@OneToMany</code>: Indica que un usuario puede tener muchos gatos.</li> </ul>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%203%20Gu%C3%ADa/#actualizar-el-metodo-create-en-catsservice","title":"Actualizar el M\u00e9todo <code>create</code> en <code>CatsService</code>","text":"<p>cats/cats.service.ts</p> <pre><code>async create(createCatDto: CreateCatDto, user: User): Promise&lt;Cat&gt; {\n  const cat = this.catsRepository.create({ ...createCatDto, owner: user });\n  return this.catsRepository.save(cat);\n}\n</code></pre> <ul> <li>Asociamos el gato creado con el usuario que lo cre\u00f3.</li> </ul>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%203%20Gu%C3%ADa/#actualizar-el-controlador_1","title":"Actualizar el Controlador","text":"<p>cats/cats.controller.ts</p> <pre><code>import { Controller, Post, Body } from '@nestjs/common';\nimport { Auth } from '../auth/auth.decorator';\nimport { User } from '../auth/user.decorator';\n\n@Controller('cats')\nexport class CatsController {\n  @Auth()\n  @Post()\n  create(@Body() createCatDto: CreateCatDto, @User() user: User) {\n    return this.catsService.create(createCatDto, user);\n  }\n}\n</code></pre> <ul> <li>Inyectamos el usuario autenticado y lo pasamos al servicio.</li> </ul>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%203%20Gu%C3%ADa/#metodos-findall-cat","title":"M\u00e9todos findAll Cat","text":""},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%203%20Gu%C3%ADa/#filtrar-gatos-por-usuario","title":"Filtrar Gatos por Usuario","text":"<p>Queremos que los usuarios solo puedan ver los gatos que ellos mismos crearon, a menos que sean administradores.</p>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%203%20Gu%C3%ADa/#modificar-el-metodo-findall-en-catsservice","title":"Modificar el M\u00e9todo <code>findAll</code> en <code>CatsService</code>","text":"<p>cats/cats.service.ts</p> <pre><code>async findAll(user: User): Promise&lt;Cat[]&gt; {\n  if (user.role === Role.Admin) {\n    return this.catsRepository.find({ relations: ['owner'] });\n  }\n  return this.catsRepository.find({\n    where: { owner: { id: user.id } },\n    relations: ['owner'],\n  });\n}\n</code></pre> <ul> <li>Admin: Si el usuario es admin, devuelve todos los gatos.</li> <li>Usuario Regular: Devuelve solo los gatos que pertenecen al usuario.</li> </ul>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%203%20Gu%C3%ADa/#actualizar-el-controlador_2","title":"Actualizar el Controlador","text":"<p>cats/cats.controller.ts</p> <pre><code>@Auth()\n@Get()\nfindAll(@User() user: User) {\n  return this.catsService.findAll(user);\n}\n</code></pre>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%203%20Gu%C3%ADa/#metodo-findone-cat","title":"M\u00e9todo findOne Cat","text":""},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%203%20Gu%C3%ADa/#restringir-acceso-al-metodo-findone","title":"Restringir Acceso al M\u00e9todo <code>findOne</code>","text":"<p>Al obtener un gato por ID, debemos asegurarnos de que el usuario tenga permiso para verlo.</p>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%203%20Gu%C3%ADa/#modificar-el-metodo-findone-en-catsservice","title":"Modificar el M\u00e9todo <code>findOne</code> en <code>CatsService</code>","text":"<p>cats/cats.service.ts</p> <pre><code>async findOne(id: number, user: User): Promise&lt;Cat&gt; {\n  const cat = await this.catsRepository.findOne({\n    where: { id },\n    relations: ['owner'],\n  });\n  if (!cat) {\n    throw new NotFoundException('Cat not found');\n  }\n  if (user.role !== Role.Admin &amp;&amp; cat.owner.id !== user.id) {\n    throw new ForbiddenException('Access denied');\n  }\n  return cat;\n}\n</code></pre> <ul> <li>Verificaci\u00f3n de Propiedad: Si el usuario no es el propietario y no es admin, se deniega el acceso.</li> </ul>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%203%20Gu%C3%ADa/#actualizar-el-controlador_3","title":"Actualizar el Controlador","text":"<p>cats/cats.controller.ts</p> <pre><code>@Auth()\n@Get(':id')\nfindOne(@Param('id') id: number, @User() user: User) {\n  return this.catsService.findOne(+id, user);\n}\n</code></pre>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%203%20Gu%C3%ADa/#actualizar-cat","title":"Actualizar Cat","text":""},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%203%20Gu%C3%ADa/#control-de-acceso-en-actualizacion","title":"Control de Acceso en Actualizaci\u00f3n","text":"<p>Solo el propietario o un administrador pueden actualizar un gato.</p>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%203%20Gu%C3%ADa/#modificar-el-metodo-update-en-catsservice","title":"Modificar el M\u00e9todo <code>update</code> en <code>CatsService</code>","text":"<p>cats/cats.service.ts</p> <pre><code>async update(id: number, updateCatDto: UpdateCatDto, user: User): Promise&lt;Cat&gt; {\n  const cat = await this.findOne(id, user);\n  Object.assign(cat, updateCatDto);\n  return this.catsRepository.save(cat);\n}\n</code></pre> <ul> <li>Reutilizamos <code>findOne</code>: Garantiza que el usuario tiene permiso para actualizar.</li> <li>Actualizaci\u00f3n: Modificamos los campos y guardamos.</li> </ul>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%203%20Gu%C3%ADa/#actualizar-el-controlador_4","title":"Actualizar el Controlador","text":"<p>cats/cats.controller.ts</p> <pre><code>@Auth()\n@Patch(':id')\nupdate(@Param('id') id: number, @Body() updateCatDto: UpdateCatDto, @User() user: User) {\n  return this.catsService.update(+id, updateCatDto, user);\n}\n</code></pre>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%203%20Gu%C3%ADa/#eliminar-cat","title":"Eliminar Cat","text":""},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%203%20Gu%C3%ADa/#control-de-acceso-en-eliminacion","title":"Control de Acceso en Eliminaci\u00f3n","text":"<p>Solo el propietario o un administrador pueden eliminar un gato.</p>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%203%20Gu%C3%ADa/#modificar-el-metodo-remove-en-catsservice","title":"Modificar el M\u00e9todo <code>remove</code> en <code>CatsService</code>","text":"<p>cats/cats.service.ts</p> <pre><code>async remove(id: number, user: User): Promise&lt;void&gt; {\n  const cat = await this.findOne(id, user);\n  await this.catsRepository.remove(cat);\n}\n</code></pre> <ul> <li>Verificaci\u00f3n de Permisos: Utilizamos <code>findOne</code> para validar.</li> <li>Eliminaci\u00f3n: Eliminamos el registro de la base de datos.</li> </ul>"},{"location":"Aprendizaje3/Back/nest/Nest%20Semana%203%20Gu%C3%ADa/#actualizar-el-controlador_5","title":"Actualizar el Controlador","text":"<p>cats/cats.controller.ts</p> <pre><code>@Auth()\n@Delete(':id')\nremove(@Param('id') id: number, @User() user: User) {\n  return this.catsService.remove(+id, user);\n}\n</code></pre>"},{"location":"Aprendizaje3/Back/nest/Nest%20semana1%20Gu%C3%ADa/","title":"NestJS: Creaci\u00f3n de una API REST con MySQL, TypeORM y TypeScript","text":""},{"location":"Aprendizaje3/Back/nest/Nest%20semana1%20Gu%C3%ADa/#que-es-nestjs","title":"\u00bfQu\u00e9 es NestJS?","text":"<p>NestJS es un framework progresivo de Node.js para construir aplicaciones de servidor eficientes y escalables. Est\u00e1 construido con TypeScript y se inspira en Angular, lo que facilita la adopci\u00f3n para aquellos familiarizados con este framework frontend. NestJS utiliza una arquitectura modular, lo que promueve una separaci\u00f3n clara de responsabilidades y facilita la mantenibilidad del c\u00f3digo.</p>"},{"location":"Aprendizaje3/Back/nest/Nest%20semana1%20Gu%C3%ADa/#por-que-usar-nestjs","title":"\u00bfPor qu\u00e9 usar NestJS?","text":"<ul> <li>Arquitectura Modular: Facilita la organizaci\u00f3n y reutilizaci\u00f3n de c\u00f3digo.</li> <li>Soporte para TypeScript: Proporciona tipado est\u00e1tico, mejorando la calidad del c\u00f3digo y la experiencia de desarrollo.</li> <li>Integraci\u00f3n con TypeORM: Simplifica la interacci\u00f3n con bases de datos.</li> <li>Inyecci\u00f3n de Dependencias: Facilita la gesti\u00f3n de dependencias y la creaci\u00f3n de componentes desacoplados.</li> <li>Comunidad Activa: Amplio soporte y constante actualizaci\u00f3n de herramientas y librer\u00edas.</li> </ul>"},{"location":"Aprendizaje3/Back/nest/Nest%20semana1%20Gu%C3%ADa/#que-es-typeorm","title":"\u00bfQu\u00e9 es TypeORM?","text":"<p>TypeORM es un ORM (Object-Relational Mapping) que facilita la interacci\u00f3n entre aplicaciones TypeScript y bases de datos SQL. Proporciona una abstracci\u00f3n sobre las operaciones CRUD, permitiendo trabajar con entidades y repositorios en lugar de escribir consultas SQL manualmente.</p>"},{"location":"Aprendizaje3/Back/nest/Nest%20semana1%20Gu%C3%ADa/#caracteristicas-principales","title":"Caracter\u00edsticas Principales","text":"<ul> <li>Soporte para m\u00faltiples bases de datos: MySQL, PostgreSQL, SQLite, MariaDB, Microsoft SQL Server, Oracle, etc.</li> <li>Decoradores para Definir Entidades: Utiliza decoradores de TypeScript para definir modelos de datos.</li> <li>Migraciones: Facilita la gesti\u00f3n de cambios en el esquema de la base de datos.</li> <li>Relaciones entre Entidades: Soporta relaciones uno a uno, uno a muchos y muchos a muchos.</li> <li>Query Builder: Permite construir consultas complejas de manera program\u00e1tica.</li> <li>Active Record y Data Mapper: Soporta ambos patrones de dise\u00f1o.</li> </ul>"},{"location":"Aprendizaje3/Back/nest/Nest%20semana1%20Gu%C3%ADa/#instalacion-y-configuracion","title":"Instalaci\u00f3n y Configuraci\u00f3n","text":"<p>Para integrar TypeORM con NestJS, es necesario instalar los paquetes correspondientes y configurar la conexi\u00f3n a la base de datos.</p> <pre><code>npm install --save @nestjs/typeorm typeorm mysql2\n\nEn el archivo `app.module.ts`, se configura el m\u00f3dulo de TypeORM:\n\n```typescript\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRoot({\n      type: 'mysql',\n      host: 'localhost',\n      port: 3306,\n      username: 'tu_usuario',\n      password: 'tu_contrase\u00f1a',\n      database: 'nombre_de_la_base_de_datos',\n      entities: [__dirname + '/**/*.entity{.ts,.js}'],\n      synchronize: true,\n    }),\n    // Otros m\u00f3dulos\n  ],\n})\nexport class AppModule {}\n</code></pre>"},{"location":"Aprendizaje3/Back/nest/Nest%20semana1%20Gu%C3%ADa/#que-es-nestjs-cli","title":"\u00bfQu\u00e9 es Nest.js CLI?","text":"<p>El CLI (Command Line Interface) de NestJS es una herramienta poderosa que simplifica la creaci\u00f3n y gesti\u00f3n de proyectos NestJS. Permite generar m\u00f3dulos, controladores, servicios y otros componentes de manera autom\u00e1tica, siguiendo las mejores pr\u00e1cticas del framework.</p>"},{"location":"Aprendizaje3/Back/nest/Nest%20semana1%20Gu%C3%ADa/#instalacion-del-cli","title":"Instalaci\u00f3n del CLI","text":"<p>Para instalar el Nest.js CLI de manera global, ejecuta:</p> <pre><code>npm install -g @nestjs/cli\n</code></pre>"},{"location":"Aprendizaje3/Back/nest/Nest%20semana1%20Gu%C3%ADa/#creacion-de-un-nuevo-proyecto","title":"Creaci\u00f3n de un Nuevo Proyecto","text":"<p>Utiliza el siguiente comando para crear un nuevo proyecto NestJS:</p> <pre><code>nest new nombre-del-proyecto\n</code></pre> <p>Este comando genera la estructura b\u00e1sica del proyecto, instala las dependencias y configura el entorno de desarrollo.</p>"},{"location":"Aprendizaje3/Back/nest/Nest%20semana1%20Gu%C3%ADa/#comandos-basicos-del-cli","title":"Comandos B\u00e1sicos del CLI","text":"<ul> <li>Generar M\u00f3dulo:</li> </ul> <p><code>bash   nest generate module nombre-modulo</code></p> <ul> <li>Generar Controlador:</li> </ul> <p><code>bash   nest generate controller nombre-controlador</code></p> <ul> <li>Generar Servicio:</li> </ul> <p><code>bash   nest generate service nombre-servicio</code></p> <ul> <li>Generar Recurso:</li> </ul> <p><code>bash   nest generate resource nombre-recurso</code></p> <p>Este comando genera un m\u00f3dulo, controlador y servicio para un recurso espec\u00edfico, facilitando la creaci\u00f3n de APIs RESTful.</p>"},{"location":"Aprendizaje3/Back/nest/Nest%20semana1%20Gu%C3%ADa/#que-es-docker-compose","title":"\u00bfQu\u00e9 es Docker Compose?","text":"<p>Docker Compose es una herramienta para definir y gestionar aplicaciones multicontenedor de Docker. Permite definir los servicios, redes y vol\u00famenes de la aplicaci\u00f3n en un archivo <code>docker-compose.yml</code>, facilitando la orquestaci\u00f3n y despliegue de entornos de desarrollo consistentes.</p>"},{"location":"Aprendizaje3/Back/nest/Nest%20semana1%20Gu%C3%ADa/#instalacion-de-docker-y-docker-compose","title":"Instalaci\u00f3n de Docker y Docker Compose","text":"<ol> <li>Instalar Docker Desktop:</li> <li> <p>Descarga e instala Docker Desktop desde Docker Hub.</p> </li> <li> <p>Verificar la Instalaci\u00f3n:</p> </li> </ol> <p><code>bash    docker --version    docker-compose --version</code></p>"},{"location":"Aprendizaje3/Back/nest/Nest%20semana1%20Gu%C3%ADa/#configuracion-de-docker-compose-para-mysql","title":"Configuraci\u00f3n de Docker Compose para MySQL","text":"<p>Crea un archivo <code>docker-compose.yml</code> en la ra\u00edz de tu proyecto con la siguiente configuraci\u00f3n:</p> <pre><code>version: '3.8'\n\nservices:\n  db:\n    image: mysql:8.0\n    restart: always\n    environment:\n      MYSQL_DATABASE: nombre_de_la_base_de_datos\n      MYSQL_USER: tu_usuario\n      MYSQL_PASSWORD: tu_contrase\u00f1a\n      MYSQL_ROOT_PASSWORD: tu_contrase\u00f1a_root\n    ports:\n      - \"3306:3306\"\n    volumes:\n      - db_data:/var/lib/mysql\n\nvolumes:\n  db_data:\n</code></pre>"},{"location":"Aprendizaje3/Back/nest/Nest%20semana1%20Gu%C3%ADa/#uso-de-docker-compose","title":"Uso de Docker Compose","text":"<ol> <li>Iniciar los Servicios:</li> </ol> <p><code>bash    docker-compose up -d</code></p> <p>Este comando descarga la imagen de MySQL, crea y ejecuta el contenedor en segundo plano.</p> <ol> <li>Detener los Servicios:</li> </ol> <p><code>bash    docker-compose down</code></p> <ol> <li>Verificar los Contenedores en Ejecuci\u00f3n:</li> </ol> <p><code>bash    docker ps</code></p>"},{"location":"Aprendizaje3/Back/nest/Nest%20semana1%20Gu%C3%ADa/#ventajas-de-usar-docker-compose","title":"Ventajas de Usar Docker Compose","text":"<ul> <li>Consistencia en Entornos: Asegura que todos los desarrolladores trabajen con las mismas configuraciones.</li> <li>Facilidad de Uso: Simplifica el inicio y parada de servicios con comandos sencillos.</li> <li>Escalabilidad: Permite a\u00f1adir m\u00e1s servicios f\u00e1cilmente, como servidores de cach\u00e9, APIs adicionales, etc.</li> </ul>"},{"location":"Aprendizaje3/Back/nest/Nest%20semana1%20Gu%C3%ADa/#visualizar-base-de-datos","title":"Visualizar Base de Datos","text":""},{"location":"Aprendizaje3/Back/nest/Nest%20semana1%20Gu%C3%ADa/#herramienta-recomendada-dbeaver","title":"Herramienta Recomendada: DBeaver","text":""},{"location":"Aprendizaje3/Back/nest/Nest%20semana1%20Gu%C3%ADa/#instalacion-de-dbeaver","title":"Instalaci\u00f3n de DBeaver","text":"<ol> <li>Descargar DBeaver:</li> <li> <p>Visita https://dbeaver.io/download/ y descarga la versi\u00f3n Community para Windows.</p> </li> <li> <p>Ejecutar el Instalador:</p> </li> <li> <p>Sigue las instrucciones del asistente de instalaci\u00f3n.</p> </li> <li> <p>Configurar la Conexi\u00f3n a MySQL:</p> </li> <li> <p>Abrir DBeaver:</p> <ul> <li>Inicia DBeaver desde el men\u00fa de inicio o el acceso directo.</li> </ul> </li> <li> <p>Crear una Nueva Conexi\u00f3n:</p> <ul> <li>Haz clic en el bot\u00f3n \"New Database Connection\".</li> </ul> </li> <li> <p>Seleccionar MySQL:</p> <ul> <li>Elige MySQL de la lista de bases de datos y haz clic en \"Next\".</li> </ul> </li> <li> <p>Ingresar los Detalles de Conexi\u00f3n:</p> <ul> <li>Host: <code>localhost</code></li> <li>Port: <code>3306</code></li> <li>Database: <code>nombre_de_la_base_de_datos</code></li> <li>Username: <code>tu_usuario</code></li> <li>Password: <code>tu_contrase\u00f1a</code></li> </ul> </li> <li> <p>Probar la Conexi\u00f3n:</p> <ul> <li>Haz clic en \"Test Connection\" para verificar que los detalles son correctos.</li> </ul> </li> <li> <p>Finalizar la Configuraci\u00f3n:</p> <ul> <li>Si la prueba es exitosa, haz clic en \"Finish\".</li> </ul> </li> </ol> <p>Puedes usar el que mas te guste </p>"},{"location":"Aprendizaje3/Back/nest/Nest%20semana1%20Gu%C3%ADa/#cli-resource-cats","title":"CLI Resource Cats","text":""},{"location":"Aprendizaje3/Back/nest/Nest%20semana1%20Gu%C3%ADa/#creacion-de-recursos-con-nestjs-cli","title":"Creaci\u00f3n de Recursos con Nest.js CLI","text":"<p>Para estructurar la API de manera eficiente, Nest.js CLI ofrece comandos para generar recursos completos, incluyendo m\u00f3dulos, controladores y servicios.</p>"},{"location":"Aprendizaje3/Back/nest/Nest%20semana1%20Gu%C3%ADa/#generar-un-recurso-cats","title":"Generar un Recurso: Cats","text":"<p>Ejecuta el siguiente comando para generar un recurso llamado <code>cats</code>:</p> <pre><code>nest generate resource cats\n</code></pre>"},{"location":"Aprendizaje3/Back/nest/Nest%20semana1%20Gu%C3%ADa/#estructura-generada","title":"Estructura Generada","text":"<p>Este comando crea:</p> <ul> <li>M\u00f3dulo: <code>cats.module.ts</code></li> <li>Controlador: <code>cats.controller.ts</code></li> <li>Servicio: <code>cats.service.ts</code></li> <li>DTOs: Data Transfer Objects para manejar datos de entrada y salida.</li> <li>Interfaces: Definici\u00f3n de la estructura de los datos.</li> </ul>"},{"location":"Aprendizaje3/Back/nest/Nest%20semana1%20Gu%C3%ADa/#introduccion-a-class-validator","title":"Introducci\u00f3n a Class Validator","text":"<p>Class Validator es una biblioteca que permite realizar validaciones en las propiedades de las clases utilizando decoradores. Es especialmente \u00fatil para validar datos de entrada en APIs, asegurando que los datos cumplen con ciertos criterios antes de ser procesados.</p>"},{"location":"Aprendizaje3/Back/nest/Nest%20semana1%20Gu%C3%ADa/#instalacion","title":"Instalaci\u00f3n","text":"<p>Para instalar Class Validator y Class Transformer, ejecuta:</p> <pre><code>npm install --save class-validator class-transformer\n</code></pre>"},{"location":"Aprendizaje3/Back/nest/Nest%20semana1%20Gu%C3%ADa/#uso-en-nestjs","title":"Uso en NestJS","text":"<ol> <li>Crear DTOs con Validaciones:</li> </ol> <p>Define DTOs (Data Transfer Objects) utilizando decoradores de validaci\u00f3n para asegurar que los datos recibidos cumplen con los requisitos.</p> <pre><code>   import { IsString, IsInt, Min, Max } from 'class-validator';\n\n   export class CreateCatDto {\n     @IsString()\n     readonly name: string;\n\n     @IsInt()\n     @Min(0)\n     @Max(30)\n     readonly age: number;\n\n     @IsString()\n     readonly breed: string;\n   }\n</code></pre> <ol> <li>Aplicar Validaciones en el Controlador:</li> </ol> <p>Utiliza el pipe de validaci\u00f3n proporcionado por NestJS para aplicar las validaciones definidas en los DTOs.</p> <pre><code>   import { Body, Controller, Post } from '@nestjs/common';\n   import { CreateCatDto } from './dto/create-cat.dto';\n   import { CatsService } from './cats.service';\n\n   @Controller('cats')\n   export class CatsController {\n     constructor(private readonly catsService: CatsService) {}\n\n     @Post()\n     async create(@Body() createCatDto: CreateCatDto) {\n       return this.catsService.create(createCatDto);\n     }\n   }\n</code></pre> <ol> <li>Habilitar Validaciones Globales:</li> </ol> <p>En el archivo <code>main.ts</code>, habilita el pipe de validaci\u00f3n global para que todas las solicitudes pasen por las validaciones definidas en los DTOs.</p> <pre><code>   import { ValidationPipe } from '@nestjs/common';\n   import { NestFactory } from '@nestjs/core';\n   import { AppModule } from './app.module';\n\n   async function bootstrap() {\n     const app = await NestFactory.create(AppModule);\n     app.useGlobalPipes(new ValidationPipe());\n     await app.listen(3000);\n   }\n   bootstrap();\n</code></pre>"},{"location":"Aprendizaje3/Back/nest/Nest%20semana1%20Gu%C3%ADa/#ventajas-de-usar-class-validator","title":"Ventajas de Usar Class Validator","text":"<ul> <li>Simplicidad: F\u00e1cil de implementar y utilizar con decoradores.</li> <li>Flexibilidad: Soporta una amplia gama de validaciones personalizables.</li> <li>Integraci\u00f3n: Se integra perfectamente con NestJS y su sistema de pipes.</li> </ul>"},{"location":"Aprendizaje3/Back/nest/Nest%20semana1%20Gu%C3%ADa/#conexion-a-base-de-datos","title":"Conexi\u00f3n a Base de Datos","text":""},{"location":"Aprendizaje3/Back/nest/Nest%20semana1%20Gu%C3%ADa/#configuracion-de-la-conexion-con-typeorm","title":"Configuraci\u00f3n de la Conexi\u00f3n con TypeORM","text":"<p>Para conectar NestJS con MySQL utilizando TypeORM, es necesario configurar los detalles de conexi\u00f3n en el m\u00f3dulo de TypeORM.</p>"},{"location":"Aprendizaje3/Back/nest/Nest%20semana1%20Gu%C3%ADa/#pasos-para-configurar-la-conexion","title":"Pasos para Configurar la Conexi\u00f3n","text":"<ol> <li>Editar <code>app.module.ts</code>:</li> </ol> <pre><code>   import { Module } from '@nestjs/common';\n   import { TypeOrmModule } from '@nestjs/typeorm';\n   import { CatsModule } from './cats/cats.module';\n\n   @Module({\n     imports: [\n       TypeOrmModule.forRoot({\n         type: 'mysql',\n         host: 'localhost',\n         port: 3306,\n         username: 'tu_usuario',\n         password: 'tu_contrase\u00f1a',\n         database: 'nombre_de_la_base_de_datos',\n         entities: [__dirname + '/**/*.entity{.ts,.js}'],\n         synchronize: true,\n       }),\n       CatsModule,\n     ],\n     controllers: [],\n     providers: [],\n   })\n   export class AppModule {}\n</code></pre> <ul> <li>Type: Tipo de base de datos (<code>mysql</code>).</li> <li>Host: <code>localhost</code> si est\u00e1 ejecut\u00e1ndose localmente.</li> <li>Port: Puerto de conexi\u00f3n (<code>3306</code> para MySQL).</li> <li>Username: Usuario de la base de datos.</li> <li>Password: Contrase\u00f1a del usuario.</li> <li>Database: Nombre de la base de datos.</li> <li>Entities: Ruta donde se encuentran las entidades.</li> <li>Synchronize: <code>true</code> para sincronizar autom\u00e1ticamente el esquema de la base de datos (solo en desarrollo).</li> </ul>"},{"location":"Aprendizaje3/Back/nest/Nest%20semana1%20Gu%C3%ADa/#beneficios-de-la-configuracion","title":"Beneficios de la Configuraci\u00f3n","text":"<ul> <li>Facilidad de Uso: TypeORM maneja la conexi\u00f3n y las operaciones b\u00e1sicas con la base de datos.</li> <li>Automatizaci\u00f3n: Las entidades se sincronizan autom\u00e1ticamente con el esquema de la base de datos.</li> <li>Flexibilidad: Permite configurar diferentes opciones seg\u00fan las necesidades del proyecto.</li> </ul>"},{"location":"Aprendizaje3/Back/nest/Nest%20semana1%20Gu%C3%ADa/#repository-pattern","title":"Repository Pattern","text":""},{"location":"Aprendizaje3/Back/nest/Nest%20semana1%20Gu%C3%ADa/#que-es-el-repository-pattern","title":"\u00bfQu\u00e9 es el Repository Pattern?","text":"<p>El Repository Pattern es un patr\u00f3n de dise\u00f1o que abstrae la l\u00f3gica de acceso a datos, proporcionando una interfaz limpia para interactuar con la fuente de datos. En el contexto de TypeORM y NestJS, los repositorios gestionan las operaciones CRUD (Crear, Leer, Actualizar, Eliminar) para las entidades.</p>"},{"location":"Aprendizaje3/Back/nest/Nest%20semana1%20Gu%C3%ADa/#beneficios-del-repository-pattern","title":"Beneficios del Repository Pattern","text":"<ul> <li>Desacoplamiento: Separa la l\u00f3gica de acceso a datos de la l\u00f3gica de negocio.</li> <li>Mantenibilidad: Facilita el mantenimiento y la escalabilidad del c\u00f3digo.</li> <li>Testabilidad: Permite la creaci\u00f3n de pruebas unitarias m\u00e1s f\u00e1cilmente al mockear los repositorios.</li> </ul>"},{"location":"Aprendizaje3/Back/nest/Nest%20semana1%20Gu%C3%ADa/#implementacion-en-nestjs","title":"Implementaci\u00f3n en NestJS","text":"<ol> <li>Inyecci\u00f3n del Repositorio:</li> </ol> <p>En el servicio, inyecta el repositorio correspondiente a la entidad.</p> <pre><code>   import { Injectable } from '@nestjs/common';\n   import { InjectRepository } from '@nestjs/typeorm';\n   import { Repository } from 'typeorm';\n   import { Cat } from './entities/cat.entity';\n   import { CreateCatDto } from './dto/create-cat.dto';\n\n   @Injectable()\n   export class CatsService {\n     constructor(\n       @InjectRepository(Cat)\n       private catsRepository: Repository&lt;Cat&gt;,\n     ) {}\n\n     create(createCatDto: CreateCatDto): Promise&lt;Cat&gt; {\n       const cat = this.catsRepository.create(createCatDto);\n       return this.catsRepository.save(cat);\n     }\n\n     findAll(): Promise&lt;Cat[]&gt; {\n       return this.catsRepository.find();\n     }\n\n     // Otros m\u00e9todos CRUD\n   }\n</code></pre> <ol> <li>Uso del Repositorio:</li> </ol> <p>Utiliza los m\u00e9todos proporcionados por TypeORM para interactuar con la base de datos, como <code>find</code>, <code>findOne</code>, <code>create</code>, <code>save</code>, <code>remove</code>, etc.</p>"},{"location":"Aprendizaje3/Back/nest/Nest%20semana1%20Gu%C3%ADa/#entity","title":"Entity","text":""},{"location":"Aprendizaje3/Back/nest/Nest%20semana1%20Gu%C3%ADa/#que-es-una-entity-en-typeorm","title":"\u00bfQu\u00e9 es una Entity en TypeORM?","text":"<p>Una Entity en TypeORM representa una tabla en la base de datos y cada instancia de la entidad representa una fila en dicha tabla. Las entidades se definen como clases de TypeScript decoradas con decoradores proporcionados por TypeORM.</p>"},{"location":"Aprendizaje3/Back/nest/Nest%20semana1%20Gu%C3%ADa/#definicion-de-una-entity","title":"Definici\u00f3n de una Entity","text":"<ol> <li>Crear la Clase de la Entity:</li> </ol> <p>Crea un archivo <code>cat.entity.ts</code> en la carpeta <code>entities</code> dentro del m\u00f3dulo <code>cats</code>.</p> <pre><code>   import { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\n\n   @Entity()\n   export class Cat {\n     @PrimaryGeneratedColumn()\n     id: number;\n\n     @Column()\n     name: string;\n\n     @Column()\n     age: number;\n\n     @Column()\n     breed: string;\n   }\n</code></pre> <ul> <li>@Entity(): Marca la clase como una entidad que TypeORM gestionar\u00e1.</li> <li>@PrimaryGeneratedColumn(): Define la columna <code>id</code> como una clave primaria auto-generada.</li> <li>@Column(): Define las columnas de la entidad.</li> </ul>"},{"location":"Aprendizaje3/Back/nest/Nest%20semana1%20Gu%C3%ADa/#tipos-de-columnas","title":"Tipos de Columnas","text":"<ul> <li>Tipos B\u00e1sicos:</li> <li> <p><code>string</code>, <code>number</code>, <code>boolean</code>, <code>Date</code>, etc.</p> </li> <li> <p>Tipos Avanzados:</p> </li> <li><code>enum</code>, <code>array</code>, <code>json</code>, etc.</li> </ul>"},{"location":"Aprendizaje3/Back/nest/Nest%20semana1%20Gu%C3%ADa/#relaciones-entre-entities","title":"Relaciones entre Entities","text":"<p>TypeORM permite definir relaciones entre entidades, como uno a uno, uno a muchos y muchos a muchos.</p> <pre><code>import { Entity, Column, PrimaryGeneratedColumn, OneToMany } from 'typeorm';\nimport { Photo } from './photo.entity';\n\n@Entity()\nexport class Cat {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  name: string;\n\n  @OneToMany(() =&gt; Photo, (photo) =&gt; photo.cat)\n  photos: Photo[];\n}\n</code></pre>"},{"location":"Aprendizaje3/Back/nest/Nest%20semana1%20Gu%C3%ADa/#ventajas-de-utilizar-entities","title":"Ventajas de Utilizar Entities","text":"<ul> <li>Mapeo Directo a la Base de Datos: Facilita la sincronizaci\u00f3n entre el modelo de datos de la aplicaci\u00f3n y la base de datos.</li> <li>Organizaci\u00f3n: Mantiene el c\u00f3digo limpio y organizado al separar las definiciones de las entidades.</li> <li>Flexibilidad: Permite definir relaciones y tipos de columnas complejos.</li> </ul>"},{"location":"Aprendizaje3/Back/nest/Nest%20semana1%20Gu%C3%ADa/#utilizando-repository-pattern","title":"Utilizando Repository Pattern","text":""},{"location":"Aprendizaje3/Back/nest/Nest%20semana1%20Gu%C3%ADa/#integracion-del-repository-pattern-en-el-servicio","title":"Integraci\u00f3n del Repository Pattern en el Servicio","text":"<p>Una vez definidas las entidades y configurado el repositorio, se pueden implementar m\u00e9todos en el servicio para manejar las operaciones CRUD utilizando el Repository Pattern.</p>"},{"location":"Aprendizaje3/Back/nest/Nest%20semana1%20Gu%C3%ADa/#ejemplos-de-metodos-en-el-servicio","title":"Ejemplos de M\u00e9todos en el Servicio","text":"<ol> <li>Crear un Nuevo Cat:</li> </ol> <pre><code>   async create(createCatDto: CreateCatDto): Promise&lt;Cat&gt; {\n     const cat = this.catsRepository.create(createCatDto);\n     return this.catsRepository.save(cat);\n   }\n</code></pre> <ul> <li>create: Crea una nueva instancia de la entidad <code>Cat</code> con los datos proporcionados.</li> <li> <p>save: Persiste la entidad en la base de datos.</p> </li> <li> <p>Obtener Todos los Cats:</p> </li> </ul> <pre><code>   findAll(): Promise&lt;Cat[]&gt; {\n     return this.catsRepository.find();\n   }\n</code></pre> <ul> <li> <p>find: Recupera todas las entidades <code>Cat</code> de la base de datos.</p> </li> <li> <p>Obtener un Cat por ID:</p> </li> </ul> <pre><code>   findOne(id: number): Promise&lt;Cat&gt; {\n     return this.catsRepository.findOneBy({ id });\n   }\n</code></pre> <ul> <li> <p>findOneBy: Busca una entidad <code>Cat</code> espec\u00edfica por su <code>id</code>.</p> </li> <li> <p>Actualizar un Cat:</p> </li> </ul> <pre><code>   async update(id: number, updateCatDto: UpdateCatDto): Promise&lt;Cat&gt; {\n     await this.catsRepository.update(id, updateCatDto);\n     return this.catsRepository.findOneBy({ id });\n   }\n</code></pre> <ul> <li>update: Actualiza los datos de una entidad <code>Cat</code> existente.</li> <li> <p>findOneBy: Recupera la entidad actualizada.</p> </li> <li> <p>Eliminar un Cat:</p> </li> </ul> <pre><code>   async remove(id: number): Promise&lt;void&gt; {\n     await this.catsRepository.delete(id);\n   }\n</code></pre> <ul> <li>delete: Elimina una entidad <code>Cat</code> de la base de datos.</li> </ul>"},{"location":"Aprendizaje3/Back/nest/Nest%20semana1%20Gu%C3%ADa/#beneficios-de-utilizar-repository-pattern","title":"Beneficios de Utilizar Repository Pattern","text":"<ul> <li>Abstracci\u00f3n: Oculta la complejidad de las operaciones de base de datos.</li> <li>Reutilizaci\u00f3n de C\u00f3digo: Permite reutilizar m\u00e9todos y l\u00f3gica de acceso a datos.</li> <li>Facilidad de Pruebas: Simplifica la creaci\u00f3n de pruebas unitarias al permitir mockear repositorios.</li> </ul>"},{"location":"Aprendizaje3/Back/nest/Nest%20semana1%20Gu%C3%ADa/#create-cat-dto","title":"Create Cat DTO","text":""},{"location":"Aprendizaje3/Back/nest/Nest%20semana1%20Gu%C3%ADa/#que-es-un-dto","title":"\u00bfQu\u00e9 es un DTO?","text":"<p>DTO (Data Transfer Object) es un patr\u00f3n de dise\u00f1o que se utiliza para transferir datos entre diferentes capas de una aplicaci\u00f3n. En NestJS, los DTOs se utilizan para definir la estructura de los datos que se env\u00edan y reciben a trav\u00e9s de la API, asegurando que los datos cumplen con los requisitos antes de ser procesados.</p>"},{"location":"Aprendizaje3/Back/nest/Nest%20semana1%20Gu%C3%ADa/#creacion-de-un-createcatdto","title":"Creaci\u00f3n de un CreateCatDto","text":"<ol> <li>Definir el DTO:</li> </ol> <p>Crea un archivo <code>create-cat.dto.ts</code> en la carpeta <code>dto</code> dentro del m\u00f3dulo <code>cats</code>.</p> <pre><code>   import { IsString, IsInt, Min, Max } from 'class-validator';\n\n   export class CreateCatDto {\n     @IsString()\n     readonly name: string;\n\n     @IsInt()\n     @Min(0)\n     @Max(30)\n     readonly age: number;\n\n     @IsString()\n     readonly breed: string;\n   }\n</code></pre> <ul> <li> <p>Decoradores de Validaci\u00f3n:</p> <ul> <li><code>@IsString()</code>: Asegura que el valor es una cadena de texto.</li> <li><code>@IsInt()</code>: Asegura que el valor es un n\u00famero entero.</li> <li><code>@Min()</code>, <code>@Max()</code>: Define los l\u00edmites m\u00ednimo y m\u00e1ximo para el valor.</li> </ul> </li> <li> <p>Uso del DTO en el Controlador:</p> </li> </ul> <p>Aplica el DTO en el m\u00e9todo <code>create</code> del controlador para validar los datos de entrada.</p> <pre><code>   import { Body, Controller, Post } from '@nestjs/common';\n   import { CreateCatDto } from './dto/create-cat.dto';\n   import { CatsService } from './cats.service';\n\n   @Controller('cats')\n   export class CatsController {\n     constructor(private readonly catsService: CatsService) {}\n\n     @Post()\n     async create(@Body() createCatDto: CreateCatDto) {\n       return this.catsService.create(createCatDto);\n     }\n   }\n</code></pre>"},{"location":"Aprendizaje3/Back/nest/Nest%20semana1%20Gu%C3%ADa/#ventajas-de-usar-dtos","title":"Ventajas de Usar DTOs","text":"<ul> <li>Validaci\u00f3n de Datos: Asegura que los datos recibidos cumplen con los requisitos antes de ser procesados.</li> <li>Seguridad: Previene la inyecci\u00f3n de datos maliciosos al controlar la estructura y tipos de los datos.</li> <li>Claridad: Define claramente qu\u00e9 datos se esperan en cada operaci\u00f3n, mejorando la mantenibilidad del c\u00f3digo.</li> </ul>"},{"location":"Aprendizaje3/Back/nest/Nest%20semana1%20Gu%C3%ADa/#soft-delete","title":"Soft Delete","text":""},{"location":"Aprendizaje3/Back/nest/Nest%20semana1%20Gu%C3%ADa/#que-es-soft-delete","title":"\u00bfQu\u00e9 es Soft Delete?","text":"<p>Soft Delete es una t\u00e9cnica para eliminar registros de una base de datos sin borrarlos f\u00edsicamente. En lugar de eliminar el registro, se marca como eliminado mediante un campo adicional, lo que permite restaurarlo en el futuro si es necesario.</p>"},{"location":"Aprendizaje3/Back/nest/Nest%20semana1%20Gu%C3%ADa/#implementacion-de-soft-delete-con-typeorm","title":"Implementaci\u00f3n de Soft Delete con TypeORM","text":"<ol> <li>A\u00f1adir una Columna de Eliminaci\u00f3n Suave:</li> </ol> <p>En la entidad <code>Cat</code>, a\u00f1ade un campo <code>deletedAt</code> que almacenar\u00e1 la fecha de eliminaci\u00f3n.</p> <pre><code>   import { Entity, Column, PrimaryGeneratedColumn, DeleteDateColumn } from 'typeorm';\n\n   @Entity()\n   export class Cat {\n     @PrimaryGeneratedColumn()\n     id: number;\n\n     @Column()\n     name: string;\n\n     @Column()\n     age: number;\n\n     @Column()\n     breed: string;\n\n     @DeleteDateColumn()\n     deletedAt?: Date;\n   }\n</code></pre> <ul> <li> <p>@DeleteDateColumn(): Marca la columna para almacenar la fecha de eliminaci\u00f3n suave.</p> </li> <li> <p>Configuraci\u00f3n del Repositorio:</p> </li> </ul> <p>TypeORM maneja autom\u00e1ticamente las eliminaciones suaves si se usa el m\u00e9todo <code>softDelete</code>.</p> <pre><code>   async remove(id: number): Promise&lt;void&gt; {\n     await this.catsRepository.softDelete(id);\n   }\n</code></pre> <ol> <li>Recuperar Registros Eliminados Suavemente:</li> </ol> <p>Utiliza el m\u00e9todo <code>restore</code> para recuperar un registro eliminado.</p> <pre><code>   async restore(id: number): Promise&lt;void&gt; {\n     await this.catsRepository.restore(id);\n   }\n</code></pre> <ol> <li>Filtrar Registros Eliminados:</li> </ol> <p>Por defecto, TypeORM excluye los registros eliminados suavemente en las consultas. Para incluirlos, se puede usar el par\u00e1metro <code>withDeleted</code>.</p> <pre><code>   findAll(): Promise&lt;Cat[]&gt; {\n     return this.catsRepository.find({ withDeleted: true });\n   }\n</code></pre>"},{"location":"Aprendizaje3/Back/nest/Nest%20semana1%20Gu%C3%ADa/#ventajas-de-soft-delete","title":"Ventajas de Soft Delete","text":"<ul> <li>Recuperaci\u00f3n de Datos: Permite restaurar registros eliminados por error.</li> <li>Auditor\u00eda: Mantiene un historial de registros eliminados.</li> <li>Integridad Referencial: Evita problemas en relaciones de tablas al no eliminar registros f\u00edsicamente.</li> </ul>"},{"location":"Aprendizaje3/Back/nest/Nest%20semana1%20Gu%C3%ADa/#consideraciones","title":"Consideraciones","text":"<ul> <li>Rendimiento: Puede afectar el rendimiento si se manejan grandes vol\u00famenes de datos con muchos registros eliminados.</li> <li>Mantenimiento: Requiere limpieza peri\u00f3dica de registros eliminados para mantener la base de datos optimizada.</li> </ul>"},{"location":"Aprendizaje3/Back/nest/Nest%20semana1%20Gu%C3%ADa/#update","title":"Update","text":""},{"location":"Aprendizaje3/Back/nest/Nest%20semana1%20Gu%C3%ADa/#implementacion-de-la-funcionalidad-de-actualizacion","title":"Implementaci\u00f3n de la Funcionalidad de Actualizaci\u00f3n","text":"<p>Actualizar registros en una API RESTful es una operaci\u00f3n fundamental. En NestJS, esto se logra mediante la combinaci\u00f3n de DTOs, validaciones y el uso del Repository Pattern.</p>"},{"location":"Aprendizaje3/Back/nest/Nest%20semana1%20Gu%C3%ADa/#pasos-para-implementar-la-actualizacion","title":"Pasos para Implementar la Actualizaci\u00f3n","text":"<ol> <li>Crear el DTO de Actualizaci\u00f3n:</li> </ol> <p>Define un DTO que permita actualizar campos espec\u00edficos de la entidad <code>Cat</code>.</p> <pre><code>   import { PartialType } from '@nestjs/mapped-types';\n   import { CreateCatDto } from './create-cat.dto';\n\n   export class UpdateCatDto extends PartialType(CreateCatDto) {}\n</code></pre> <ul> <li> <p>PartialType: Permite que todos los campos del DTO original sean opcionales, facilitando actualizaciones parciales.</p> </li> <li> <p>Actualizar el Controlador:</p> </li> </ul> <p>A\u00f1ade un m\u00e9todo <code>update</code> en el controlador para manejar las solicitudes de actualizaci\u00f3n.</p> <pre><code>   import { Body, Controller, Param, Patch } from '@nestjs/common';\n   import { UpdateCatDto } from './dto/update-cat.dto';\n   import { CatsService } from './cats.service';\n\n   @Controller('cats')\n   export class CatsController {\n     constructor(private readonly catsService: CatsService) {}\n\n     @Patch(':id')\n     async update(@Param('id') id: number, @Body() updateCatDto: UpdateCatDto) {\n       return this.catsService.update(id, updateCatDto);\n     }\n   }\n</code></pre> <ol> <li>Actualizar el Servicio:</li> </ol> <p>Implementa el m\u00e9todo <code>update</code> en el servicio, utilizando el repositorio para actualizar el registro.</p> <pre><code>   async update(id: number, updateCatDto: UpdateCatDto): Promise&lt;Cat&gt; {\n     await this.catsRepository.update(id, updateCatDto);\n     return this.catsRepository.findOneBy({ id });\n   }\n</code></pre>"},{"location":"Aprendizaje3/Back/nest/Nest%20semana1%20Gu%C3%ADa/#consideraciones-para-la-actualizacion","title":"Consideraciones para la Actualizaci\u00f3n","text":"<ul> <li>Validaci\u00f3n de Datos: Asegura que los datos de entrada cumplen con los requisitos antes de actualizar.</li> <li>Manejo de Errores: Gestiona adecuadamente los casos donde el registro a actualizar no existe.</li> <li>Actualizaciones Parciales: Permite actualizar solo los campos necesarios sin afectar otros datos.</li> </ul>"},{"location":"Aprendizaje3/Back/nest/Nest%20semana1%20Gu%C3%ADa/#relaciones-sql","title":"Relaciones SQL","text":""},{"location":"Aprendizaje3/Back/nest/Nest%20semana1%20Gu%C3%ADa/#introduccion-a-las-relaciones-en-sql","title":"Introducci\u00f3n a las Relaciones en SQL","text":"<p>Las relaciones en bases de datos permiten asociar tablas entre s\u00ed, estableciendo c\u00f3mo los datos en una tabla se relacionan con los datos en otra. Las relaciones principales son:</p> <ul> <li>Uno a Uno (One-to-One): Un registro en una tabla est\u00e1 asociado a un \u00fanico registro en otra tabla.</li> <li>Uno a Muchos (One-to-Many): Un registro en una tabla est\u00e1 asociado a m\u00faltiples registros en otra tabla.</li> <li>Muchos a Muchos (Many-to-Many): M\u00faltiples registros en una tabla est\u00e1n asociados a m\u00faltiples registros en otra tabla.</li> </ul>"},{"location":"Aprendizaje3/Back/nest/Nest%20semana1%20Gu%C3%ADa/#implementacion-de-relaciones-con-typeorm","title":"Implementaci\u00f3n de Relaciones con TypeORM","text":""},{"location":"Aprendizaje3/Back/nest/Nest%20semana1%20Gu%C3%ADa/#relaciones-uno-a-muchos","title":"Relaciones Uno a Muchos","text":"<p>Ejemplo: Un <code>Cat</code> puede tener muchas <code>Photo</code>.</p> <ol> <li>Definir las Entidades:</li> </ol> <pre><code>   // cat.entity.ts\n   import { Entity, Column, PrimaryGeneratedColumn, OneToMany } from 'typeorm';\n   import { Photo } from './photo.entity';\n\n   @Entity()\n   export class Cat {\n     @PrimaryGeneratedColumn()\n     id: number;\n\n     @Column()\n     name: string;\n\n     @OneToMany(() =&gt; Photo, (photo) =&gt; photo.cat)\n     photos: Photo[];\n   }\n</code></pre> <pre><code>   // photo.entity.ts\n   import { Entity, Column, PrimaryGeneratedColumn, ManyToOne } from 'typeorm';\n   import { Cat } from './cat.entity';\n\n   @Entity()\n   export class Photo {\n     @PrimaryGeneratedColumn()\n     id: number;\n\n     @Column()\n     url: string;\n\n     @ManyToOne(() =&gt; Cat, (cat) =&gt; cat.photos)\n     cat: Cat;\n   }\n</code></pre> <ol> <li> <p>Gesti\u00f3n de las Relaciones:</p> </li> <li> <p>Creaci\u00f3n de Photos asociadas a un Cat:</p> <ul> <li>Al crear una <code>Photo</code>, se debe asociar al <code>Cat</code> correspondiente.</li> </ul> </li> <li>Cascada de Operaciones:<ul> <li>Configurar <code>cascade: true</code> si se desea que las operaciones en el <code>Cat</code> afecten autom\u00e1ticamente a las <code>Photos</code>.</li> </ul> </li> </ol>"},{"location":"Aprendizaje3/Back/nest/Nest%20semana1%20Gu%C3%ADa/#relaciones-muchos-a-muchos","title":"Relaciones Muchos a Muchos","text":"<p>Ejemplo: Un <code>Cat</code> puede tener m\u00faltiples <code>Toys</code> y un <code>Toy</code> puede pertenecer a m\u00faltiples <code>Cats</code>.</p> <ol> <li>Definir las Entidades:</li> </ol> <pre><code>   // cat.entity.ts\n   import { Entity, Column, PrimaryGeneratedColumn, ManyToMany, JoinTable } from 'typeorm';\n   import { Toy } from './toy.entity';\n\n   @Entity()\n   export class Cat {\n     @PrimaryGeneratedColumn()\n     id: number;\n\n     @Column()\n     name: string;\n\n     @ManyToMany(() =&gt; Toy, (toy) =&gt; toy.cats)\n     @JoinTable()\n     toys: Toy[];\n   }\n</code></pre> <pre><code>   // toy.entity.ts\n   import { Entity, Column, PrimaryGeneratedColumn, ManyToMany } from 'typeorm';\n   import { Cat } from './cat.entity';\n\n   @Entity()\n   export class Toy {\n     @PrimaryGeneratedColumn()\n     id: number;\n\n     @Column()\n     name: string;\n\n     @ManyToMany(() =&gt; Cat, (cat) =&gt; cat.toys)\n     cats: Cat[];\n   }\n</code></pre>"},{"location":"Aprendizaje3/Back/nest/Nest%20semana1%20Gu%C3%ADa/#ventajas-de-utilizar-relaciones-en-sql","title":"Ventajas de Utilizar Relaciones en SQL","text":"<ul> <li>Normalizaci\u00f3n de Datos: Evita la redundancia y asegura la integridad de los datos.</li> <li>Eficiencia en Consultas: Facilita la ejecuci\u00f3n de consultas complejas y el filtrado de datos.</li> <li>Flexibilidad: Permite modelar relaciones complejas entre diferentes entidades.</li> </ul>"},{"location":"Aprendizaje3/Back/nest/Nest%20semana1%20Gu%C3%ADa/#consideraciones-al-implementar-relaciones","title":"Consideraciones al Implementar Relaciones","text":"<ul> <li>Integridad Referencial: Asegura que las relaciones entre tablas sean consistentes.</li> <li>Optimizaci\u00f3n de Consultas: Utiliza \u00edndices y optimiza las consultas para mejorar el rendimiento.</li> <li>Manejo de Relaciones en el C\u00f3digo: Gestiona adecuadamente las relaciones en el servicio y controlador para evitar errores y garantizar la consistencia de los datos.</li> </ul>"},{"location":"Aprendizaje3/Back/nest/Nest%20semana1%20Gu%C3%ADa/#resumen","title":"Resumen","text":""},{"location":"Aprendizaje3/Back/nest/Nest%20semana1%20Gu%C3%ADa/#recapitulacion-de-los-conceptos-clave","title":"Recapitulaci\u00f3n de los Conceptos Clave","text":"<p>Durante esta primera semana, hemos abordado los fundamentos esenciales para construir una API RESTful utilizando NestJS, MySQL, TypeORM y TypeScript. A continuaci\u00f3n, se resumen los puntos m\u00e1s importantes:</p> <ol> <li>Introducci\u00f3n a NestJS y su Ecosistema:</li> <li>Comprendimos qu\u00e9 es NestJS y por qu\u00e9 es una excelente elecci\u00f3n para el desarrollo de aplicaciones backend.</li> <li> <p>Exploramos las ventajas de utilizar TypeScript junto con NestJS.</p> </li> <li> <p>TypeORM:</p> </li> <li>Aprendimos qu\u00e9 es un ORM y c\u00f3mo TypeORM facilita la interacci\u00f3n con bases de datos SQL.</li> <li> <p>Configuramos la conexi\u00f3n a MySQL y definimos entidades para mapear las tablas de la base de datos.</p> </li> <li> <p>Nest.js CLI:</p> </li> <li>Instalamos y utilizamos el CLI de NestJS para generar m\u00f3dulos, controladores y servicios de manera eficiente.</li> <li> <p>Creamos el recurso <code>cats</code> utilizando el CLI, estableciendo una estructura coherente para la API.</p> </li> <li> <p>Docker Compose:</p> </li> <li>Configuramos Docker Compose para gestionar contenedores de MySQL, asegurando un entorno de desarrollo consistente.</li> <li> <p>Iniciamos y gestionamos los servicios de Docker para mantener la base de datos en funcionamiento.</p> </li> <li> <p>Visualizaci\u00f3n de la Base de Datos:</p> </li> <li>Instalamos y configuramos DBeaver para visualizar y gestionar la base de datos MySQL.</li> <li> <p>Exploramos las tablas, ejecutamos consultas y generamos diagramas ER para entender las relaciones entre entidades.</p> </li> <li> <p>Repository Pattern y Entities:</p> </li> <li>Implementamos el Repository Pattern para abstraer la l\u00f3gica de acceso a datos, mejorando la mantenibilidad y testabilidad del c\u00f3digo.</li> <li> <p>Definimos entidades que representan las tablas de la base de datos, estableciendo relaciones entre ellas.</p> </li> <li> <p>Class Validator y DTOs:</p> </li> <li>Utilizamos Class Validator para asegurar que los datos de entrada cumplen con los requisitos establecidos.</li> <li> <p>Creamos DTOs para definir la estructura de los datos que se transfieren a trav\u00e9s de la API, mejorando la seguridad y consistencia.</p> </li> <li> <p>CRUD Operations:</p> </li> <li>Implementamos las operaciones CRUD b\u00e1sicas (Crear, Leer, Actualizar, Eliminar) utilizando los servicios y controladores generados.</li> <li> <p>Aplicamos el Repository Pattern para manejar las operaciones de manera eficiente.</p> </li> <li> <p>Soft Delete:</p> </li> <li>Implementamos la funcionalidad de Soft Delete para eliminar registros de manera l\u00f3gica, permitiendo su recuperaci\u00f3n en el futuro.</li> <li> <p>Gestionamos las eliminaciones y restauraciones de registros utilizando TypeORM.</p> </li> <li> <p>Relaciones SQL:</p> <ul> <li>Establecimos relaciones entre entidades, como uno a muchos y muchos a muchos, para modelar asociaciones complejas en la base de datos.</li> <li>Configuramos las entidades y repositorios para manejar estas relaciones de manera coherente.</li> </ul> </li> </ol>"},{"location":"Aprendizaje3/Back/nest/Nest%20semana1%20Gu%C3%ADa/#recursos-adicionales","title":"Recursos Adicionales","text":"<ul> <li>Documentaci\u00f3n Oficial de NestJS</li> <li>Documentaci\u00f3n Oficial de TypeORM</li> <li>Gu\u00eda de Docker Compose</li> <li>DBeaver - Herramienta de Administraci\u00f3n de Bases de Datos</li> <li>Class Validator</li> <li>Google Fonts</li> </ul>"},{"location":"Aprendizaje3/Back/nest/semana%202/","title":"semana 2: Autenticaci\u00f3n (Login y Register)","text":"<p>ver video acerca de la Autenticaci\u00f3n en NestsJS  Duraci\u00f3n del Curso:</p> <p>1 hora y 40 minutos</p> <p>Leer la guia interpretada del curso para apoyarse y en caso de existir dudas:</p> <p>Nest Semana 2 Gu\u00eda</p> <p>video:</p> <p>leer documentacion:\u00a0</p> <p>Authentication | NestJS - A progressive Node.js framework</p> <p>Encryption and Hashing | NestJS - A progressive Node.js framework</p> <p>Validation | NestJS - A progressive Node.js framework</p>"},{"location":"Aprendizaje3/Back/nest/semana%203/","title":"semana 3: Autorizaci\u00f3n (Roles) con NestJS","text":"<p>ver video acerca de la Autorizaci\u00f3n en NestsJS  Duraci\u00f3n del Curso:</p> <p>2 horas y 40 minutos</p> <p>Leer la guia interpretada del curso para apoyarse y en caso de existir dudas: Nest Semana 3 Gu\u00eda</p> <p>videos:</p> <p>parte 1:</p> <p>parte 2:</p> <p>leer documentaci\u00f3n:</p> <p>Authorization | NestJS - A progressive Node.js framework</p>"},{"location":"Aprendizaje3/Back/nest/semana1/","title":"Gu\u00eda de Aprendizaje: Introducci\u00f3n al Desarrollo Web con con Nest JS:","text":"<p>ver video introductorio acerca de la herramienta de nestjs Duraci\u00f3n del Curso: 2 horas Leer la guia interpretada del curso para apoyarse y en caso de existir dudas: Nest semana1 Gu\u00eda</p> <p>Video: (885) Curso completo de NEST JS: API REST con MySQL, TypeORM, TypeScript - YouTube</p> <p>Leerse toda la secci\u00f3n de overview: First steps | NestJS - A progressive Node.js framework</p>"},{"location":"Aprendizaje3/Front/Basico/Ejemplo%20guiado/","title":"Ejemplo guiado","text":"<p>Creaci\u00f3n de una P\u00e1gina Web desde Cero</p> <p>En este ejercicio pr\u00e1ctico, aplicaremos todos los conceptos aprendidos desde el inicio para crear una p\u00e1gina web completa utilizando HTML y CSS. Este ejercicio cubrir\u00e1 desde la estructura b\u00e1sica de una p\u00e1gina web hasta el uso de estilos avanzados como fondos, gradientes y sombras.</p>"},{"location":"Aprendizaje3/Front/Basico/Ejemplo%20guiado/#objetivo","title":"Objetivo","text":"<ul> <li>Crear una p\u00e1gina web est\u00e1tica que incluya todos los elementos b\u00e1sicos de HTML y CSS aprendidos.</li> <li>Aplicar estilos para mejorar la presentaci\u00f3n y experiencia del usuario.</li> <li>Familiarizarse con el flujo completo de desarrollo web desde cero.</li> </ul>"},{"location":"Aprendizaje3/Front/Basico/Ejemplo%20guiado/#pasos-del-ejercicio","title":"Pasos del Ejercicio","text":""},{"location":"Aprendizaje3/Front/Basico/Ejemplo%20guiado/#1-entendiendo-la-web","title":"1. Entendiendo la Web","text":"<p>Antes de empezar, recordemos que la web funciona mediante la interacci\u00f3n entre clientes y servidores a trav\u00e9s del protocolo HTTP. Los navegadores web solicitan p\u00e1ginas y recursos al servidor, que responde enviando los archivos necesarios (HTML, CSS, JavaScript, im\u00e1genes, etc.).</p>"},{"location":"Aprendizaje3/Front/Basico/Ejemplo%20guiado/#2-preparacion-del-entorno-de-desarrollo","title":"2. Preparaci\u00f3n del Entorno de Desarrollo","text":"<ul> <li>Crear una Carpeta de Proyecto: Crea una carpeta en tu computadora llamada <code>mi_pagina_web</code>.</li> <li>Abrir el Proyecto en el Editor de C\u00f3digo: Abre la carpeta en Visual Studio Code o tu editor preferido.</li> </ul>"},{"location":"Aprendizaje3/Front/Basico/Ejemplo%20guiado/#3-estructura-basica-de-html","title":"3. Estructura B\u00e1sica de HTML","text":"<p>Crea un archivo llamado <code>index.html</code> y a\u00f1ade la estructura b\u00e1sica de una p\u00e1gina web:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;title&gt;Mi P\u00e1gina Web&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"Aprendizaje3/Front/Basico/Ejemplo%20guiado/#4-uso-de-parrafos-y-encabezados","title":"4. Uso de P\u00e1rrafos y Encabezados","text":"<p>Dentro del <code>&lt;body&gt;</code>, agrega contenido utilizando encabezados y p\u00e1rrafos:</p> <pre><code>&lt;body&gt;\n  &lt;h1&gt;Bienvenidos a Mi P\u00e1gina Web&lt;/h1&gt;\n  &lt;p&gt;Esta es una p\u00e1gina de ejemplo creada para practicar HTML y CSS.&lt;/p&gt;\n\n  &lt;h2&gt;Sobre M\u00ed&lt;/h2&gt;\n  &lt;p&gt;Soy un apasionado del desarrollo web en constante aprendizaje.&lt;/p&gt;\n&lt;/body&gt;\n</code></pre>"},{"location":"Aprendizaje3/Front/Basico/Ejemplo%20guiado/#5-creacion-de-listas","title":"5. Creaci\u00f3n de Listas","text":"<p>A\u00f1ade una lista para destacar tus habilidades o intereses:</p> <pre><code>&lt;h2&gt;Mis Habilidades&lt;/h2&gt;\n&lt;ul&gt;\n  &lt;li&gt;HTML5 y CSS3&lt;/li&gt;\n  &lt;li&gt;JavaScript&lt;/li&gt;\n  &lt;li&gt;Desarrollo Responsive&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>"},{"location":"Aprendizaje3/Front/Basico/Ejemplo%20guiado/#6-anadiendo-enlaces","title":"6. A\u00f1adiendo Enlaces","text":"<p>Incorpora enlaces internos y externos:</p> <pre><code>&lt;p&gt;Visita mi perfil en &lt;a href=\"https://github.com/tu_usuario\" target=\"_blank\"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;Para m\u00e1s informaci\u00f3n, ve a mi &lt;a href=\"contacto.html\"&gt;p\u00e1gina de contacto&lt;/a&gt;.&lt;/p&gt;\n</code></pre> <p>Crea un archivo <code>contacto.html</code> con una estructura b\u00e1sica:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;title&gt;Contacto&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Contacto&lt;/h1&gt;\n  &lt;p&gt;Puedes enviarme un mensaje a trav\u00e9s del formulario.&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"Aprendizaje3/Front/Basico/Ejemplo%20guiado/#7-insertando-imagenes-y-rutas","title":"7. Insertando Im\u00e1genes y Rutas","text":"<p>Agrega una imagen a tu p\u00e1gina principal:</p> <pre><code>&lt;h2&gt;Mi Fotograf\u00eda&lt;/h2&gt;\n&lt;img src=\"imagenes/mi_foto.jpg\" alt=\"Fotograf\u00eda personal\"&gt;\n</code></pre> <ul> <li>Crea una carpeta llamada <code>imagenes</code> dentro de <code>mi_pagina_web</code>.</li> <li>Coloca una imagen llamada <code>mi_foto.jpg</code> dentro de la carpeta <code>imagenes</code>.</li> </ul>"},{"location":"Aprendizaje3/Front/Basico/Ejemplo%20guiado/#8-creacion-de-formularios","title":"8. Creaci\u00f3n de Formularios","text":"<p>En <code>contacto.html</code>, a\u00f1ade un formulario para que los visitantes puedan contactarte:</p> <pre><code>&lt;form action=\"#\" method=\"post\"&gt;\n  &lt;label for=\"nombre\"&gt;Nombre:&lt;/label&gt;&lt;br&gt;\n  &lt;input type=\"text\" id=\"nombre\" name=\"nombre\"&gt;&lt;br&gt;&lt;br&gt;\n\n  &lt;label for=\"email\"&gt;Correo Electr\u00f3nico:&lt;/label&gt;&lt;br&gt;\n  &lt;input type=\"email\" id=\"email\" name=\"email\"&gt;&lt;br&gt;&lt;br&gt;\n\n  &lt;label for=\"mensaje\"&gt;Mensaje:&lt;/label&gt;&lt;br&gt;\n  &lt;textarea id=\"mensaje\" name=\"mensaje\" rows=\"5\" cols=\"30\"&gt;&lt;/textarea&gt;&lt;br&gt;&lt;br&gt;\n\n  &lt;input type=\"submit\" value=\"Enviar\"&gt;\n&lt;/form&gt;\n</code></pre>"},{"location":"Aprendizaje3/Front/Basico/Ejemplo%20guiado/#9-introduccion-de-css","title":"9. Introducci\u00f3n de CSS","text":"<p>Crea una carpeta llamada <code>css</code> y dentro de ella un archivo <code>estilos.css</code>. Enlaza la hoja de estilo en tus archivos HTML:</p> <pre><code>&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;title&gt;Mi P\u00e1gina Web&lt;/title&gt;\n  &lt;link rel=\"stylesheet\" href=\"css/estilos.css\"&gt;\n&lt;/head&gt;\n</code></pre> <p>Haz esto en <code>index.html</code> y <code>contacto.html</code>.</p>"},{"location":"Aprendizaje3/Front/Basico/Ejemplo%20guiado/#10-aplicacion-de-selectores-y-propiedades-basicas","title":"10. Aplicaci\u00f3n de Selectores y Propiedades B\u00e1sicas","text":"<p>En <code>estilos.css</code>, comienza a estilizar tu p\u00e1gina:</p> <pre><code>/* Selector universal */\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n/* Selector de etiqueta */\nbody {\n  font-family: Arial, sans-serif;\n  background-color: #f4f4f4;\n  color: #333;\n}\n\n/* Selector de clase */\n.contenedor {\n  width: 80%;\n  margin: 0 auto;\n}\n\n/* Selector de ID */\n#principal {\n  padding: 20px;\n}\n</code></pre> <p>Aplica las clases e IDs en tu HTML:</p> <pre><code>&lt;body id=\"principal\"&gt;\n  &lt;div class=\"contenedor\"&gt;\n    &lt;!-- Contenido aqu\u00ed --&gt;\n  &lt;/div&gt;\n&lt;/body&gt;\n</code></pre>"},{"location":"Aprendizaje3/Front/Basico/Ejemplo%20guiado/#11-uso-de-tipografias-externas","title":"11. Uso de Tipograf\u00edas Externas","text":"<p>Utiliza Google Fonts para a\u00f1adir una tipograf\u00eda personalizada:</p> <ul> <li>En tu <code>&lt;head&gt;</code>, agrega:</li> </ul> <pre><code>&lt;link href=\"https://fonts.googleapis.com/css?family=Roboto&amp;display=swap\" rel=\"stylesheet\"&gt;\n</code></pre> <ul> <li>En <code>estilos.css</code>, aplica la fuente:</li> </ul> <pre><code>body {\n  font-family: 'Roboto', sans-serif;\n}\n</code></pre>"},{"location":"Aprendizaje3/Front/Basico/Ejemplo%20guiado/#12-modelo-de-caja-y-estilos-de-contenedor","title":"12. Modelo de Caja y Estilos de Contenedor","text":"<p>Estiliza el contenedor principal:</p> <pre><code>.contenedor {\n  background-color: #fff;\n  padding: 20px;\n  margin-top: 20px;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n}\n</code></pre>"},{"location":"Aprendizaje3/Front/Basico/Ejemplo%20guiado/#13-aplicacion-de-bordes-margenes-y-rellenos","title":"13. Aplicaci\u00f3n de Bordes, M\u00e1rgenes y Rellenos","text":"<p>Aplica estilos a tus elementos:</p> <pre><code>h1, h2 {\n  margin-bottom: 15px;\n}\n\np {\n  line-height: 1.6;\n  margin-bottom: 15px;\n}\n\nul {\n  list-style-type: square;\n  margin-left: 20px;\n}\n\nimg {\n  max-width: 100%;\n  height: auto;\n  border: 5px solid #ccc;\n}\n</code></pre>"},{"location":"Aprendizaje3/Front/Basico/Ejemplo%20guiado/#14-colores-y-unidades","title":"14. Colores y Unidades","text":"<p>Define colores y unidades para un dise\u00f1o coherente:</p> <pre><code>body {\n  color: #555;\n}\n\na {\n  color: #ff7e5f;\n  text-decoration: none;\n}\n\na:hover {\n  text-decoration: underline;\n}\n\ninput, textarea {\n  width: 100%;\n  padding: 10px;\n  margin-bottom: 10px;\n}\n\ninput[type=\"submit\"] {\n  width: auto;\n  background-color: #ff7e5f;\n  color: #fff;\n  border: none;\n  cursor: pointer;\n}\n\ninput[type=\"submit\"]:hover {\n  background-color: #feb47b;\n}\n</code></pre>"},{"location":"Aprendizaje3/Front/Basico/Ejemplo%20guiado/#15-fondos-gradientes-y-sombras","title":"15. Fondos, Gradientes y Sombras","text":"<p>A\u00f1ade estilos avanzados para mejorar el aspecto visual:</p> <pre><code>/* Fondo con gradiente */\nbody {\n  background: linear-gradient(to right, #ff7e5f, #feb47b);\n}\n\n/* Sombra de texto */\nh1 {\n  text-shadow: 2px 2px 5px rgba(0, 0, 0, 0.2);\n}\n\n/* Sombra de caja */\n.contenedor {\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n}\n\n/* Bordes redondeados */\nimg {\n  border-radius: 10px;\n}\n\n/* Sombras en botones */\ninput[type=\"submit\"] {\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\n}\n</code></pre> <p>Recursos Adicionales:</p> <ul> <li>MDN Web Docs - HTML</li> <li>MDN Web Docs - CSS</li> <li>Google Fonts</li> <li>CSS-Tricks</li> </ul>"},{"location":"Aprendizaje3/Front/Basico/Interpretaci%C3%B3n%20del%20curso/","title":"Interpretaci\u00f3n del curso","text":""},{"location":"Aprendizaje3/Front/Basico/Interpretaci%C3%B3n%20del%20curso/#introduccion","title":"Introducci\u00f3n","text":"<p>El desarrollo web es un campo din\u00e1mico y en constante evoluci\u00f3n. Esta gu\u00eda te introducir\u00e1 a los conceptos fundamentales de la creaci\u00f3n de p\u00e1ginas web utilizando HTML y CSS. Aprender\u00e1s c\u00f3mo estructurar contenido, aplicar estilos y crear p\u00e1ginas web atractivas y funcionales.</p>"},{"location":"Aprendizaje3/Front/Basico/Interpretaci%C3%B3n%20del%20curso/#entendiendo-la-web","title":"Entendiendo la Web","text":"<p>La Web es una colecci\u00f3n de documentos y recursos interconectados que se acceden a trav\u00e9s de Internet. Los elementos clave para entender c\u00f3mo funciona son:</p> <ul> <li>Clientes y Servidores: Un cliente (como un navegador web) solicita recursos de un servidor, que responde enviando los datos solicitados.</li> <li>Protocolos: El HTTP (HyperText Transfer Protocol) es el protocolo utilizado para la comunicaci\u00f3n entre clientes y servidores.</li> <li>URLs: Las direcciones web que especifican la ubicaci\u00f3n de los recursos en la web.</li> </ul>"},{"location":"Aprendizaje3/Front/Basico/Interpretaci%C3%B3n%20del%20curso/#entendiendo-html-y-css","title":"Entendiendo HTML y CSS","text":"<ul> <li> <p>HTML (HyperText Markup Language): Es el lenguaje est\u00e1ndar para crear y estructurar el contenido de una p\u00e1gina web. Utiliza etiquetas para definir elementos como p\u00e1rrafos, encabezados, im\u00e1genes y enlaces.</p> </li> <li> <p>CSS (Cascading Style Sheets): Es el lenguaje utilizado para describir la presentaci\u00f3n de un documento HTML. Permite aplicar estilos como colores, fuentes, espaciados y disposici\u00f3n de elementos en la p\u00e1gina.</p> </li> </ul>"},{"location":"Aprendizaje3/Front/Basico/Interpretaci%C3%B3n%20del%20curso/#editor-de-codigo","title":"Editor de C\u00f3digo","text":"<p>Para escribir y editar c\u00f3digo HTML y CSS, es recomendable utilizar un editor de c\u00f3digo que facilite el desarrollo. Algunas opciones populares son:</p> <ul> <li>Visual Studio Code: Un editor gratuito y extensible con soporte para m\u00faltiples lenguajes.</li> <li>Sublime Text: Un editor ligero y r\u00e1pido.</li> <li>Atom: Un editor de c\u00f3digo abierto y personalizable.</li> </ul>"},{"location":"Aprendizaje3/Front/Basico/Interpretaci%C3%B3n%20del%20curso/#html-basico","title":"HTML B\u00c1SICO","text":""},{"location":"Aprendizaje3/Front/Basico/Interpretaci%C3%B3n%20del%20curso/#estructura-de-una-etiqueta","title":"Estructura de una Etiqueta","text":"<p>Las etiquetas HTML son la base de la estructura de una p\u00e1gina web. Una etiqueta t\u00edpica tiene la siguiente forma:</p> <pre><code>&lt;nombreDeEtiqueta atributos&gt;\n  Contenido\n&lt;/nombreDeEtiqueta&gt;\n</code></pre> <ul> <li>Etiqueta de apertura: <code>&lt;nombreDeEtiqueta&gt;</code></li> <li>Contenido: Puede ser texto, otras etiquetas o ambos.</li> <li>Etiqueta de cierre: <code>&lt;/nombreDeEtiqueta&gt;</code></li> </ul> <p>Ejemplo:</p> <pre><code>&lt;p&gt;Este es un p\u00e1rrafo.&lt;/p&gt;\n</code></pre> <p>Algunas etiquetas son auto-cerradas y no requieren una etiqueta de cierre, como:</p> <pre><code>&lt;br&gt; &lt;!-- Salto de l\u00ednea --&gt;\n&lt;img src=\"imagen.jpg\" alt=\"Descripci\u00f3n de la imagen\"&gt;\n</code></pre>"},{"location":"Aprendizaje3/Front/Basico/Interpretaci%C3%B3n%20del%20curso/#estructura-de-una-pagina-web","title":"Estructura de una P\u00e1gina Web","text":"<p>Una p\u00e1gina web b\u00e1sica tiene la siguiente estructura:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;title&gt;T\u00edtulo de la P\u00e1gina&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- Contenido de la p\u00e1gina --&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <ul> <li><code>&lt;!DOCTYPE html&gt;</code>: Declara el tipo de documento como HTML5.</li> <li><code>&lt;html&gt;</code>: Elemento ra\u00edz que contiene todo el contenido de la p\u00e1gina.</li> <li><code>&lt;head&gt;</code>: Contiene metadatos, como el t\u00edtulo y enlaces a hojas de estilo.</li> <li><code>&lt;body&gt;</code>: Contiene el contenido visible de la p\u00e1gina.</li> </ul>"},{"location":"Aprendizaje3/Front/Basico/Interpretaci%C3%B3n%20del%20curso/#parrafos-y-encabezados","title":"P\u00e1rrafos y Encabezados","text":"<ul> <li>Encabezados: Utiliza etiquetas <code>&lt;h1&gt;</code> a <code>&lt;h6&gt;</code> para definir t\u00edtulos y subt\u00edtulos.</li> </ul> <pre><code>&lt;h1&gt;T\u00edtulo Principal&lt;/h1&gt;\n&lt;h2&gt;Subt\u00edtulo&lt;/h2&gt;\n</code></pre> <ul> <li>P\u00e1rrafos: Utiliza la etiqueta <code>&lt;p&gt;</code> para definir p\u00e1rrafos de texto.</li> </ul> <pre><code>&lt;p&gt;Este es un p\u00e1rrafo de ejemplo.&lt;/p&gt;\n</code></pre>"},{"location":"Aprendizaje3/Front/Basico/Interpretaci%C3%B3n%20del%20curso/#listas","title":"Listas","text":"<p>Hay dos tipos principales de listas:</p> <ul> <li>Listas Ordenadas: Utiliza <code>&lt;ol&gt;</code> (ordered list) y <code>&lt;li&gt;</code> (list item).</li> </ul> <pre><code>&lt;ol&gt;\n  &lt;li&gt;Elemento 1&lt;/li&gt;\n  &lt;li&gt;Elemento 2&lt;/li&gt;\n&lt;/ol&gt;\n</code></pre> <ul> <li>Listas No Ordenadas: Utiliza <code>&lt;ul&gt;</code> (unordered list) y <code>&lt;li&gt;</code>.</li> </ul> <pre><code>&lt;ul&gt;\n  &lt;li&gt;Elemento A&lt;/li&gt;\n  &lt;li&gt;Elemento B&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>"},{"location":"Aprendizaje3/Front/Basico/Interpretaci%C3%B3n%20del%20curso/#enlaces-basico","title":"Enlaces (B\u00e1sico)","text":"<p>Los enlaces se crean con la etiqueta <code>&lt;a&gt;</code> y el atributo <code>href</code>.</p> <pre><code>&lt;a href=\"https://www.ejemplo.com\"&gt;Visita Ejemplo&lt;/a&gt;\n</code></pre> <ul> <li>Enlace interno: Apunta a otra p\u00e1gina dentro del mismo sitio.</li> </ul> <pre><code>&lt;a href=\"pagina2.html\"&gt;Ir a P\u00e1gina 2&lt;/a&gt;\n</code></pre> <ul> <li>Enlace externo: Apunta a una p\u00e1gina en otro sitio web.</li> </ul>"},{"location":"Aprendizaje3/Front/Basico/Interpretaci%C3%B3n%20del%20curso/#imagenes-y-rutas","title":"Im\u00e1genes y Rutas","text":"<p>Para insertar im\u00e1genes se utiliza la etiqueta <code>&lt;img&gt;</code>.</p> <pre><code>&lt;img src=\"ruta/imagen.jpg\" alt=\"Descripci\u00f3n de la imagen\"&gt;\n</code></pre> <ul> <li>Atributos importantes:</li> <li><code>src</code>: Especifica la ruta de la imagen.</li> <li><code>alt</code>: Proporciona una descripci\u00f3n alternativa para la imagen.</li> </ul> <p>Rutas relativas y absolutas:</p> <ul> <li>Ruta relativa: Se refiere a la ubicaci\u00f3n del archivo en relaci\u00f3n con la p\u00e1gina actual.</li> </ul> <pre><code>&lt;img src=\"imagenes/foto.jpg\" alt=\"Foto\"&gt;\n</code></pre> <ul> <li>Ruta absoluta: Especifica la ubicaci\u00f3n completa, incluyendo el dominio.</li> </ul> <pre><code>&lt;img src=\"https://www.ejemplo.com/imagenes/foto.jpg\" alt=\"Foto\"&gt;\n</code></pre>"},{"location":"Aprendizaje3/Front/Basico/Interpretaci%C3%B3n%20del%20curso/#formularios","title":"Formularios","text":"<p>Los formularios permiten la entrada de datos por parte del usuario.</p> <pre><code>&lt;form action=\"procesar.php\" method=\"post\"&gt;\n  &lt;label for=\"nombre\"&gt;Nombre:&lt;/label&gt;\n  &lt;input type=\"text\" id=\"nombre\" name=\"nombre\"&gt;\n\n  &lt;input type=\"submit\" value=\"Enviar\"&gt;\n&lt;/form&gt;\n</code></pre> <ul> <li>Elementos comunes:</li> <li><code>&lt;input&gt;</code>: Campo de entrada. El atributo <code>type</code> define el tipo de dato (texto, contrase\u00f1a, correo, etc.).</li> <li><code>&lt;label&gt;</code>: Etiqueta para el campo de entrada.</li> <li><code>&lt;textarea&gt;</code>: Campo de texto multil\u00ednea.</li> <li><code>&lt;select&gt;</code>: Men\u00fa desplegable.</li> </ul>"},{"location":"Aprendizaje3/Front/Basico/Interpretaci%C3%B3n%20del%20curso/#css-basico","title":"CSS B\u00c1SICO","text":""},{"location":"Aprendizaje3/Front/Basico/Interpretaci%C3%B3n%20del%20curso/#introduccion-a-css","title":"Introducci\u00f3n a CSS","text":"<p>CSS se utiliza para estilizar elementos HTML. Hay tres formas de aplicar CSS:</p> <ol> <li>En l\u00ednea: Usando el atributo <code>style</code> en una etiqueta HTML.</li> </ol> <pre><code>&lt;p style=\"color: blue;\"&gt;Texto azul&lt;/p&gt;\n</code></pre> <ol> <li>Interno: Dentro de una etiqueta <code>&lt;style&gt;</code> en el <code>&lt;head&gt;</code>.</li> </ol> <pre><code>&lt;head&gt;\n  &lt;style&gt;\n    p { color: blue; }\n  &lt;/style&gt;\n&lt;/head&gt;\n</code></pre> <ol> <li>Externo: En un archivo <code>.css</code> separado, vinculado con <code>&lt;link&gt;</code>.</li> </ol> <pre><code>&lt;head&gt;\n  &lt;link rel=\"stylesheet\" href=\"estilos.css\"&gt;\n&lt;/head&gt;\n</code></pre>"},{"location":"Aprendizaje3/Front/Basico/Interpretaci%C3%B3n%20del%20curso/#selectores-basico","title":"Selectores (B\u00e1sico)","text":"<p>Los selectores determinan a qu\u00e9 elementos se aplican las reglas CSS.</p> <ul> <li>Selector de etiqueta:</li> </ul> <pre><code>p {\n  color: blue;\n}\n</code></pre> <ul> <li>Selector de clase: Se aplica a elementos con un atributo <code>class</code>.</li> </ul> <p>HTML:</p> <pre><code>&lt;p class=\"importante\"&gt;Texto importante&lt;/p&gt;\n</code></pre> <p>CSS:</p> <pre><code>.importante {\n  font-weight: bold;\n}\n</code></pre> <ul> <li>Selector de ID: Se aplica a un elemento con un atributo <code>id</code>.</li> </ul> <p>HTML:</p> <pre><code>&lt;h1 id=\"titulo-principal\"&gt;T\u00edtulo&lt;/h1&gt;\n</code></pre> <p>CSS:</p> <pre><code>#titulo-principal {\n  text-align: center;\n}\n</code></pre>"},{"location":"Aprendizaje3/Front/Basico/Interpretaci%C3%B3n%20del%20curso/#propiedades-de-texto-y-fuente","title":"Propiedades de Texto y Fuente","text":"<ul> <li>Color de texto:</li> </ul> <pre><code>p {\n  color: #333333;\n}\n</code></pre> <ul> <li>Tipo de fuente:</li> </ul> <pre><code>p {\n  font-family: Arial, sans-serif;\n}\n</code></pre> <ul> <li>Tama\u00f1o de fuente:</li> </ul> <pre><code>p {\n  font-size: 16px;\n}\n</code></pre> <ul> <li>Estilo de fuente:</li> </ul> <pre><code>p {\n  font-style: italic;\n}\n</code></pre> <ul> <li>Peso de fuente:</li> </ul> <pre><code>p {\n  font-weight: bold;\n}\n</code></pre>"},{"location":"Aprendizaje3/Front/Basico/Interpretaci%C3%B3n%20del%20curso/#tipografias-externas","title":"Tipograf\u00edas Externas","text":"<p>Puedes usar fuentes externas como Google Fonts.</p> <p>Paso 1: Enlazar la fuente en el <code>&lt;head&gt;</code>.</p> <pre><code>&lt;head&gt;\n  &lt;link href=\"https://fonts.googleapis.com/css?family=Roboto&amp;display=swap\" rel=\"stylesheet\"&gt;\n&lt;/head&gt;\n</code></pre> <p>Paso 2: Aplicar la fuente en CSS.</p> <pre><code>body {\n  font-family: 'Roboto', sans-serif;\n}\n</code></pre>"},{"location":"Aprendizaje3/Front/Basico/Interpretaci%C3%B3n%20del%20curso/#modelo-de-caja-box-model","title":"Modelo de Caja (Box Model)","text":"<p>Cada elemento en HTML se considera como una caja que consta de:</p> <ul> <li>Contenido: El \u00e1rea donde se muestra el texto o im\u00e1genes.</li> <li>Padding (Relleno): Espacio entre el contenido y el borde.</li> <li>Border (Borde): El contorno del elemento.</li> <li>Margin (Margen): Espacio fuera del borde que separa el elemento de otros.</li> </ul> <p></p>"},{"location":"Aprendizaje3/Front/Basico/Interpretaci%C3%B3n%20del%20curso/#relleno-y-margen-padding-y-margin","title":"Relleno y Margen (padding y margin)","text":"<ul> <li>Padding: A\u00f1ade espacio dentro del elemento.</li> </ul> <pre><code>div {\n  padding: 20px;\n}\n</code></pre> <ul> <li>Margin: A\u00f1ade espacio fuera del elemento.</li> </ul> <pre><code>div {\n  margin: 10px;\n}\n</code></pre>"},{"location":"Aprendizaje3/Front/Basico/Interpretaci%C3%B3n%20del%20curso/#bordes","title":"Bordes","text":"<p>Define el estilo, ancho y color del borde de un elemento.</p> <pre><code>div {\n  border: 2px solid #000000;\n}\n</code></pre> <ul> <li>Estilos de borde: <code>solid</code>, <code>dashed</code>, <code>dotted</code>, etc.</li> </ul>"},{"location":"Aprendizaje3/Front/Basico/Interpretaci%C3%B3n%20del%20curso/#tamano-de-caja-box-sizing","title":"Tama\u00f1o de Caja (box-sizing)","text":"<p>Controla c\u00f3mo se calculan las dimensiones totales de un elemento.</p> <ul> <li> <p><code>content-box</code>: Valor predeterminado. El tama\u00f1o incluye solo el contenido.</p> </li> <li> <p><code>border-box</code>: El tama\u00f1o incluye contenido, padding y borde.</p> </li> </ul> <pre><code>* {\n  box-sizing: border-box;\n}\n</code></pre>"},{"location":"Aprendizaje3/Front/Basico/Interpretaci%C3%B3n%20del%20curso/#colores","title":"Colores","text":"<p>Puedes especificar colores en CSS utilizando:</p> <ul> <li>Nombres de colores:</li> </ul> <pre><code>p {\n  color: red;\n}\n</code></pre> <ul> <li>Valores Hexadecimales:</li> </ul> <pre><code>p {\n  color: #FF0000;\n}\n</code></pre> <ul> <li>RGB/RGBA:</li> </ul> <pre><code>p {\n  color: rgb(255, 0, 0);\n}\n\ndiv {\n  background-color: rgba(0, 0, 0, 0.5); /* Transparencia */\n}\n</code></pre>"},{"location":"Aprendizaje3/Front/Basico/Interpretaci%C3%B3n%20del%20curso/#unidades","title":"Unidades","text":"<p>Unidades comunes utilizadas en CSS:</p> <ul> <li>P\u00edxeles (<code>px</code>): Tama\u00f1o fijo.</li> </ul> <pre><code>p {\n  font-size: 16px;\n}\n</code></pre> <ul> <li>Porcentajes (<code>%</code>): Relativo al elemento padre.</li> </ul> <pre><code>div {\n  width: 50%;\n}\n</code></pre> <ul> <li>Em: Relativo al tama\u00f1o de fuente del elemento padre.</li> </ul> <pre><code>p {\n  font-size: 1.5em;\n}\n</code></pre> <ul> <li>Rem: Relativo al tama\u00f1o de fuente ra\u00edz (<code>&lt;html&gt;</code>).</li> </ul> <pre><code>p {\n  font-size: 1rem;\n}\n</code></pre> <p>Recursos Adicionales:</p> <ul> <li>MDN Web Docs - Introducci\u00f3n a HTML</li> <li>MDN Web Docs - Introducci\u00f3n a CSS</li> <li>W3Schools - Tutoriales de HTML y CSS</li> </ul> <p>Para terminar, tenemos un ejemplo guiado usando los puntos ya vistos: Ejemplo guiado </p>"},{"location":"Aprendizaje3/Front/Basico/JS%20y%20TS%20semana%202%20Gu%C3%ADa/","title":"JavaScript y TypeScript","text":""},{"location":"Aprendizaje3/Front/Basico/JS%20y%20TS%20semana%202%20Gu%C3%ADa/#configuracion-del-editor","title":"Configuraci\u00f3n del Editor","text":"<ul> <li> <p>Instala extensiones \u00fatiles como:</p> </li> <li> <p>ESLint: Para mantener un c\u00f3digo limpio y consistente.</p> </li> <li>Prettier: Para formatear el c\u00f3digo autom\u00e1ticamente.</li> <li>TypeScript: Proporciona soporte para TypeScript en el editor.</li> </ul>"},{"location":"Aprendizaje3/Front/Basico/JS%20y%20TS%20semana%202%20Gu%C3%ADa/#primera-aplicacion","title":"Primera Aplicaci\u00f3n","text":"<p>Crea un directorio para tus proyectos y, dentro de \u00e9l, un archivo <code>index.html</code> y un archivo <code>app.js</code>.</p> <p>index.html:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\" /&gt;\n  &lt;title&gt;Mi Primera Aplicaci\u00f3n&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;\u00a1Hola, Mundo!&lt;/h1&gt;\n  &lt;script src=\"app.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>app.js:</p> <pre><code>console.log('\u00a1Hola desde app.js!');\n</code></pre> <p>Abre <code>index.html</code> en tu navegador y observa el mensaje en la consola.</p>"},{"location":"Aprendizaje3/Front/Basico/JS%20y%20TS%20semana%202%20Gu%C3%ADa/#referenciando-archivos","title":"Referenciando Archivos","text":"<p>Es importante enlazar correctamente tus archivos JavaScript en el HTML. Utiliza la etiqueta <code>&lt;script src=\"app.js\"&gt;&lt;/script&gt;</code> justo antes de cerrar el <code>&lt;/body&gt;</code> para asegurarte de que el DOM se haya cargado antes de ejecutar el script.</p>"},{"location":"Aprendizaje3/Front/Basico/JS%20y%20TS%20semana%202%20Gu%C3%ADa/#tipos-basicos-en-javascript","title":"Tipos B\u00e1sicos en JavaScript","text":""},{"location":"Aprendizaje3/Front/Basico/JS%20y%20TS%20semana%202%20Gu%C3%ADa/#variables","title":"Variables","text":"<p>Las variables son contenedores para almacenar datos. En JavaScript, puedes declararlas utilizando <code>var</code>, <code>let</code> o <code>const</code>.</p> <ul> <li>var: Tiene un alcance de funci\u00f3n y puede ser redeclarada.</li> <li>let: Tiene un alcance de bloque y puede ser reasignada, pero no redeclarada.</li> <li>const: Tiene un alcance de bloque y no puede ser reasignada ni redeclarada.</li> </ul> <p>Ejemplo:</p> <pre><code>let nombre = 'Juan';\nconst edad = 30;\nvar ciudad = 'Madrid';\n</code></pre>"},{"location":"Aprendizaje3/Front/Basico/JS%20y%20TS%20semana%202%20Gu%C3%ADa/#reglas-para-nombrar-variables","title":"Reglas para Nombrar Variables","text":"<ul> <li>Deben comenzar con una letra, <code>$</code> o <code>_</code>.</li> <li>No pueden comenzar con un n\u00famero.</li> <li>Son case-sensitive (<code>nombre</code> y <code>Nombre</code> son diferentes).</li> <li>No pueden usar palabras reservadas.</li> </ul>"},{"location":"Aprendizaje3/Front/Basico/JS%20y%20TS%20semana%202%20Gu%C3%ADa/#tipos-de-datos","title":"Tipos de Datos","text":"<p>JavaScript tiene tipos de datos primitivos y objetos.</p>"},{"location":"Aprendizaje3/Front/Basico/JS%20y%20TS%20semana%202%20Gu%C3%ADa/#tipos-primitivos","title":"Tipos Primitivos","text":"<ul> <li>string: Cadenas de texto.</li> </ul> <p><code>javascript   let mensaje = 'Hola, Mundo';</code></p> <ul> <li>number: N\u00fameros (enteros y decimales).</li> </ul> <p><code>javascript   let temperatura = 25.5;</code></p> <ul> <li>boolean: Verdadero o falso.</li> </ul> <p><code>javascript   let esMayorDeEdad = true;</code></p> <ul> <li> <p>undefined: Valor asignado autom\u00e1ticamente a variables no inicializadas.</p> </li> <li> <p>null: Representa ausencia de valor.</p> </li> <li> <p>symbol: Tipo \u00fanico introducido en ES6.</p> </li> </ul>"},{"location":"Aprendizaje3/Front/Basico/JS%20y%20TS%20semana%202%20Gu%C3%ADa/#constantes","title":"Constantes","text":"<p>Utiliza <code>const</code> para declarar constantes, valores que no cambian durante la ejecuci\u00f3n.</p> <pre><code>const PI = 3.1416;\n</code></pre>"},{"location":"Aprendizaje3/Front/Basico/JS%20y%20TS%20semana%202%20Gu%C3%ADa/#tipado-dinamico","title":"Tipado Din\u00e1mico","text":"<p>JavaScript es un lenguaje de tipado din\u00e1mico; una variable puede contener valores de diferentes tipos en distintos momentos.</p> <pre><code>let valor = 42;\nvalor = 'Ahora soy una cadena';\n</code></pre>"},{"location":"Aprendizaje3/Front/Basico/JS%20y%20TS%20semana%202%20Gu%C3%ADa/#comentarios","title":"Comentarios","text":"<ul> <li>Comentario de una l\u00ednea: <code>// Comentario</code></li> <li>Comentario de m\u00faltiples l\u00edneas:</li> </ul> <p><code>javascript   /*     Este es un     comentario de     m\u00faltiples l\u00edneas   */</code></p>"},{"location":"Aprendizaje3/Front/Basico/JS%20y%20TS%20semana%202%20Gu%C3%ADa/#objetos","title":"Objetos","text":"<p>Los objetos son colecciones de pares clave-valor.</p> <p>Ejemplo:</p> <pre><code>let persona = {\n  nombre: 'Ana',\n  edad: 28,\n  ciudad: 'Barcelona',\n};\n</code></pre> <p>Accedes a sus propiedades usando la notaci\u00f3n de punto o corchetes:</p> <pre><code>console.log(persona.nombre); // 'Ana'\nconsole.log(persona['edad']); // 28\n</code></pre>"},{"location":"Aprendizaje3/Front/Basico/JS%20y%20TS%20semana%202%20Gu%C3%ADa/#arrays","title":"Arrays","text":"<p>Los arrays son listas ordenadas de elementos.</p> <p>Ejemplo:</p> <pre><code>let colores = ['rojo', 'verde', 'azul'];\n</code></pre> <p>Accedes a sus elementos mediante \u00edndices:</p> <pre><code>console.log(colores[0]); // 'rojo'\n</code></pre>"},{"location":"Aprendizaje3/Front/Basico/JS%20y%20TS%20semana%202%20Gu%C3%ADa/#funciones","title":"Funciones","text":"<p>Las funciones son bloques de c\u00f3digo reutilizables.</p> <p>Declaraci\u00f3n de funci\u00f3n:</p> <pre><code>function saludar(nombre) {\n  return `Hola, ${nombre}`;\n}\n</code></pre> <p>Expresi\u00f3n de funci\u00f3n:</p> <pre><code>const saludar = function (nombre) {\n  return `Hola, ${nombre}`;\n};\n</code></pre>"},{"location":"Aprendizaje3/Front/Basico/JS%20y%20TS%20semana%202%20Gu%C3%ADa/#argumentos-y-parametros","title":"Argumentos y Par\u00e1metros","text":"<ul> <li>Par\u00e1metros: Variables definidas en la declaraci\u00f3n de la funci\u00f3n.</li> <li>Argumentos: Valores pasados a la funci\u00f3n al invocarla.</li> </ul> <p>Ejemplo:</p> <pre><code>function sumar(a, b) {\n  return a + b;\n}\n\nlet resultado = sumar(5, 3); // a = 5, b = 3\n</code></pre>"},{"location":"Aprendizaje3/Front/Basico/JS%20y%20TS%20semana%202%20Gu%C3%ADa/#operadores-en-javascript","title":"Operadores en JavaScript","text":""},{"location":"Aprendizaje3/Front/Basico/JS%20y%20TS%20semana%202%20Gu%C3%ADa/#declaraciones-y-expresiones","title":"Declaraciones y Expresiones","text":"<ul> <li>Declaraciones: Instrucciones que realizan una acci\u00f3n.</li> </ul> <p><code>javascript   let x = 10;</code></p> <ul> <li>Expresiones: Fragmentos de c\u00f3digo que producen un valor.</li> </ul> <p><code>javascript   x + y;</code></p>"},{"location":"Aprendizaje3/Front/Basico/JS%20y%20TS%20semana%202%20Gu%C3%ADa/#operadores-aritmeticos","title":"Operadores Aritm\u00e9ticos","text":"<ul> <li>Suma (+): <code>a + b</code></li> <li>Resta (-): <code>a - b</code></li> <li>Multiplicaci\u00f3n (*): <code>a * b</code></li> <li>Divisi\u00f3n (/): <code>a / b</code></li> <li>M\u00f3dulo (%): <code>a % b</code> (resto de la divisi\u00f3n)</li> <li>Incremento (++): <code>a++</code> o <code>++a</code></li> <li>Decremento (--): <code>a--</code> o <code>--a</code></li> </ul>"},{"location":"Aprendizaje3/Front/Basico/JS%20y%20TS%20semana%202%20Gu%C3%ADa/#operadores-de-asignacion","title":"Operadores de Asignaci\u00f3n","text":"<ul> <li>Asignaci\u00f3n (=): <code>a = b</code></li> <li> <p>Asignaci\u00f3n con operaci\u00f3n:</p> </li> <li> <p><code>a += b</code> (equivale a <code>a = a + b</code>)</p> </li> <li><code>a -= b</code></li> <li><code>a *= b</code></li> <li><code>a /= b</code></li> </ul>"},{"location":"Aprendizaje3/Front/Basico/JS%20y%20TS%20semana%202%20Gu%C3%ADa/#operadores-de-comparacion","title":"Operadores de Comparaci\u00f3n","text":"<ul> <li>Igualdad estricta (=== ): Compara valor y tipo.</li> <li>Desigualdad estricta (!== )</li> <li>Mayor que (&gt;), Menor que (&lt;)</li> <li>Mayor o igual que (&gt;=), Menor o igual que (&lt;=)</li> </ul> <p>Ejemplo:</p> <pre><code>let esIgual = (5 === '5'); // false\n</code></pre>"},{"location":"Aprendizaje3/Front/Basico/JS%20y%20TS%20semana%202%20Gu%C3%ADa/#operadores-logicos","title":"Operadores L\u00f3gicos","text":"<ul> <li>AND (&amp;&amp;): Verdadero si ambos operandos son verdaderos.</li> <li>OR (||): Verdadero si al menos uno es verdadero.</li> <li>NOT (!): Invierte el valor l\u00f3gico.</li> </ul> <p>Ejemplo:</p> <pre><code>let resultado = (a &gt; 0) &amp;&amp; (b &gt; 0);\n</code></pre>"},{"location":"Aprendizaje3/Front/Basico/JS%20y%20TS%20semana%202%20Gu%C3%ADa/#short-circuit","title":"Short Circuit","text":"<p>En operaciones l\u00f3gicas, si el primer operando determina el resultado, el segundo no se eval\u00faa.</p> <ul> <li>AND (&amp;&amp;): Si el primer operando es <code>false</code>, el resultado es <code>false</code>.</li> <li>OR (||): Si el primer operando es <code>true</code>, el resultado es <code>true</code>.</li> </ul>"},{"location":"Aprendizaje3/Front/Basico/JS%20y%20TS%20semana%202%20Gu%C3%ADa/#operadores-bitwise","title":"Operadores Bitwise","text":"<p>Operan a nivel de bits. Algunos ejemplos son:</p> <ul> <li>AND (&amp;)</li> <li>OR (|)</li> <li>XOR (^)</li> <li>NOT (~)</li> <li>Shift Left (&lt;&lt;)</li> <li>Shift Right (&gt;&gt;)</li> </ul>"},{"location":"Aprendizaje3/Front/Basico/JS%20y%20TS%20semana%202%20Gu%C3%ADa/#orden-de-operaciones","title":"Orden de Operaciones","text":"<p>JavaScript sigue un orden de precedencia en las operaciones, similar al matem\u00e1tico. Usa par\u00e9ntesis <code>()</code> para controlar el orden.</p>"},{"location":"Aprendizaje3/Front/Basico/JS%20y%20TS%20semana%202%20Gu%C3%ADa/#operador-ternario","title":"Operador Ternario","text":"<p>Sintaxis corta para una sentencia <code>if...else</code>.</p> <p>Sintaxis:</p> <pre><code>condici\u00f3n ? expresi\u00f3n_si_verdadero : expresi\u00f3n_si_falso;\n</code></pre> <p>Ejemplo:</p> <pre><code>let esMayor = edad &gt;= 18 ? 'S\u00ed' : 'No';\n</code></pre>"},{"location":"Aprendizaje3/Front/Basico/JS%20y%20TS%20semana%202%20Gu%C3%ADa/#control-de-flujo","title":"Control de Flujo","text":""},{"location":"Aprendizaje3/Front/Basico/JS%20y%20TS%20semana%202%20Gu%C3%ADa/#operador-if","title":"Operador if","text":"<p>Permite ejecutar c\u00f3digo basado en una condici\u00f3n.</p> <p>Ejemplo:</p> <pre><code>if (condici\u00f3n) {\n  // C\u00f3digo a ejecutar si la condici\u00f3n es verdadera\n}\n</code></pre>"},{"location":"Aprendizaje3/Front/Basico/JS%20y%20TS%20semana%202%20Gu%C3%ADa/#else","title":"else","text":"<p>Proporciona una alternativa si la condici\u00f3n es falsa.</p> <pre><code>if (condici\u00f3n) {\n  // Si es verdadera\n} else {\n  // Si es falsa\n}\n</code></pre>"},{"location":"Aprendizaje3/Front/Basico/JS%20y%20TS%20semana%202%20Gu%C3%ADa/#while","title":"while","text":"<p>Ejecuta un bloque de c\u00f3digo mientras una condici\u00f3n es verdadera.</p> <pre><code>while (condici\u00f3n) {\n  // C\u00f3digo a ejecutar\n}\n</code></pre> <p>Cuidado con los loops infinitos: Aseg\u00farate de que la condici\u00f3n cambiar\u00e1 en alg\u00fan momento.</p>"},{"location":"Aprendizaje3/Front/Basico/JS%20y%20TS%20semana%202%20Gu%C3%ADa/#do-while","title":"do while","text":"<p>Similar a <code>while</code>, pero se ejecuta al menos una vez.</p> <pre><code>do {\n  // C\u00f3digo a ejecutar\n} while (condici\u00f3n);\n</code></pre>"},{"location":"Aprendizaje3/Front/Basico/JS%20y%20TS%20semana%202%20Gu%C3%ADa/#for","title":"for","text":"<p>Usado para iterar un n\u00famero conocido de veces.</p> <pre><code>for (inicializaci\u00f3n; condici\u00f3n; actualizaci\u00f3n) {\n  // C\u00f3digo a ejecutar\n}\n</code></pre> <p>Ejemplo:</p> <pre><code>for (let i = 0; i &lt; 5; i++) {\n  console.log(i);\n}\n</code></pre>"},{"location":"Aprendizaje3/Front/Basico/JS%20y%20TS%20semana%202%20Gu%C3%ADa/#forof","title":"for...of","text":"<p>Itera sobre elementos iterables (arrays, strings).</p> <pre><code>for (let elemento of iterable) {\n  // C\u00f3digo a ejecutar\n}\n</code></pre>"},{"location":"Aprendizaje3/Front/Basico/JS%20y%20TS%20semana%202%20Gu%C3%ADa/#forin","title":"for...in","text":"<p>Itera sobre las propiedades enumerables de un objeto.</p> <pre><code>for (let propiedad in objeto) {\n  // C\u00f3digo a ejecutar\n}\n</code></pre>"},{"location":"Aprendizaje3/Front/Basico/JS%20y%20TS%20semana%202%20Gu%C3%ADa/#continue-y-break","title":"Continue y Break","text":"<ul> <li>continue: Salta a la siguiente iteraci\u00f3n.</li> <li>break: Sale del loop.</li> </ul>"},{"location":"Aprendizaje3/Front/Basico/JS%20y%20TS%20semana%202%20Gu%C3%ADa/#switch","title":"switch","text":"<p>Selecciona entre m\u00faltiples opciones.</p> <pre><code>switch (expresi\u00f3n) {\n  case valor1:\n    // C\u00f3digo si expresi\u00f3n === valor1\n    break;\n  case valor2:\n    // C\u00f3digo si expresi\u00f3n === valor2\n    break;\n  default:\n    // C\u00f3digo si ninguno coincide\n}\n</code></pre>"},{"location":"Aprendizaje3/Front/Basico/JS%20y%20TS%20semana%202%20Gu%C3%ADa/#introduccion-a-typescript","title":"Introducci\u00f3n a TypeScript","text":""},{"location":"Aprendizaje3/Front/Basico/JS%20y%20TS%20semana%202%20Gu%C3%ADa/#que-es-typescript","title":"\u00bfQu\u00e9 es TypeScript?","text":"<p>TypeScript es un superset de JavaScript que a\u00f1ade tipado est\u00e1tico y otras caracter\u00edsticas avanzadas. Se compila a JavaScript puro, por lo que puede ejecutarse en cualquier entorno que soporte JavaScript.</p> <p>TypeScript requiere un proceso de compilaci\u00f3n para convertir el c\u00f3digo TypeScript (<code>.ts</code>) a JavaScript (<code>.js</code>).</p>"},{"location":"Aprendizaje3/Front/Basico/JS%20y%20TS%20semana%202%20Gu%C3%ADa/#compilacion-en-typescript","title":"Compilaci\u00f3n en TypeScript","text":"<ul> <li>Instalar TypeScript globalmente:</li> </ul> <p><code>bash   npm install -g typescript</code></p> <ul> <li>Compilar un archivo:</li> </ul> <p><code>bash   tsc archivo.ts</code></p>"},{"location":"Aprendizaje3/Front/Basico/JS%20y%20TS%20semana%202%20Gu%C3%ADa/#herramientas","title":"Herramientas","text":"<ul> <li>tsc: El compilador de TypeScript.</li> <li>ts-node: Permite ejecutar c\u00f3digo TypeScript sin necesidad de compilarlo expl\u00edcitamente.</li> <li>Visual Studio Code: Tiene excelente soporte para TypeScript.</li> </ul>"},{"location":"Aprendizaje3/Front/Basico/JS%20y%20TS%20semana%202%20Gu%C3%ADa/#inicio-con-typescript","title":"Inicio con TypeScript","text":"<ul> <li>Crear un proyecto:</li> </ul> <p><code>bash   mkdir mi-proyecto   cd mi-proyecto   npm init -y   tsc --init</code></p> <ul> <li>Configuraci\u00f3n b\u00e1sica: El comando <code>tsc --init</code> genera un archivo <code>tsconfig.json</code> para configurar el compilador.</li> </ul>"},{"location":"Aprendizaje3/Front/Basico/JS%20y%20TS%20semana%202%20Gu%C3%ADa/#tipos-en-typescript","title":"Tipos en TypeScript","text":""},{"location":"Aprendizaje3/Front/Basico/JS%20y%20TS%20semana%202%20Gu%C3%ADa/#tipos-basicos","title":"Tipos B\u00e1sicos","text":"<ul> <li>string</li> <li>number</li> <li>boolean</li> <li>any: Puede ser de cualquier tipo.</li> <li>void: Ausencia de tipo, generalmente en funciones que no retornan valor.</li> <li>null y undefined</li> </ul> <p>Ejemplo:</p> <pre><code>let nombre: string = 'Laura';\nlet edad: number = 25;\nlet esActivo: boolean = true;\n</code></pre>"},{"location":"Aprendizaje3/Front/Basico/JS%20y%20TS%20semana%202%20Gu%C3%ADa/#tipado-en-variables","title":"Tipado en Variables","text":"<p>TypeScript puede inferir el tipo de una variable a partir de su valor inicial.</p> <pre><code>let mensaje = 'Hola'; // TypeScript infiere que es string\n</code></pre>"},{"location":"Aprendizaje3/Front/Basico/JS%20y%20TS%20semana%202%20Gu%C3%ADa/#tipado-en-funciones","title":"Tipado en Funciones","text":"<ul> <li>Tipado de par\u00e1metros:</li> </ul> <p><code>typescript   function sumar(a: number, b: number): number {     return a + b;   }</code></p> <ul> <li>Tipado de retorno:</li> </ul> <p><code>typescript   function saludar(nombre: string): string {     return `Hola, ${nombre}`;   }</code></p>"},{"location":"Aprendizaje3/Front/Basico/JS%20y%20TS%20semana%202%20Gu%C3%ADa/#never-y-void","title":"never y void","text":"<ul> <li>void: Indica que una funci\u00f3n no retorna un valor.</li> </ul> <p><code>typescript   function logMensaje(mensaje: string): void {     console.log(mensaje);   }</code></p> <ul> <li>never: Indica que una funci\u00f3n no finaliza su ejecuci\u00f3n (lanza una excepci\u00f3n o entra en un loop infinito).</li> </ul> <p><code>typescript   function error(mensaje: string): never {     throw new Error(mensaje);   }</code></p>"},{"location":"Aprendizaje3/Front/Basico/JS%20y%20TS%20semana%202%20Gu%C3%ADa/#objetos-en-typescript","title":"Objetos en TypeScript","text":"<p>Puedes definir el tipo de un objeto especificando sus propiedades y tipos.</p> <pre><code>let persona: { nombre: string; edad: number } = {\n  nombre: 'Carlos',\n  edad: 40,\n};\n</code></pre>"},{"location":"Aprendizaje3/Front/Basico/JS%20y%20TS%20semana%202%20Gu%C3%ADa/#type-alias","title":"Type Alias","text":"<p>Permite crear un alias para un tipo.</p> <pre><code>type Punto = {\n  x: number;\n  y: number;\n};\n\nlet coordenada: Punto = { x: 10, y: 20 };\n</code></pre>"},{"location":"Aprendizaje3/Front/Basico/JS%20y%20TS%20semana%202%20Gu%C3%ADa/#propiedades-opcionales","title":"Propiedades Opcionales","text":"<p>Usa <code>?</code> para indicar que una propiedad es opcional.</p> <pre><code>type Usuario = {\n  nombre: string;\n  email?: string; // Opcional\n};\n</code></pre>"},{"location":"Aprendizaje3/Front/Basico/JS%20y%20TS%20semana%202%20Gu%C3%ADa/#optional-chaining-operator","title":"Optional Chaining Operator","text":"<p>Permite acceder a propiedades anidadas sin causar errores si alguna es <code>undefined</code> o <code>null</code>.</p> <pre><code>console.log(usuario?.email);\n</code></pre>"},{"location":"Aprendizaje3/Front/Basico/JS%20y%20TS%20semana%202%20Gu%C3%ADa/#mutabilidad","title":"Mutabilidad","text":"<ul> <li>Constantes: Usa <code>const</code> para declarar variables que no cambian de referencia.</li> <li>Inmutabilidad de objetos: Puedes usar <code>Object.freeze()</code> para prevenir modificaciones.</li> </ul>"},{"location":"Aprendizaje3/Front/Basico/JS%20y%20TS%20semana%202%20Gu%C3%ADa/#template-union-types","title":"Template Union Types","text":"<p>Combina tipos literales y permite crear cadenas espec\u00edficas.</p> <pre><code>type Direccion = `${'Norte' | 'Sur'}-${'Este' | 'Oeste'}`;\nlet rumbo: Direccion = 'Norte-Este';\n</code></pre>"},{"location":"Aprendizaje3/Front/Basico/JS%20y%20TS%20semana%202%20Gu%C3%ADa/#union-types-e-intersection-types","title":"Union Types e Intersection Types","text":""},{"location":"Aprendizaje3/Front/Basico/JS%20y%20TS%20semana%202%20Gu%C3%ADa/#union-types","title":"Union Types","text":"<p>Permite que una variable sea de uno u otro tipo.</p> <pre><code>let resultado: string | number;\nresultado = 'Aprobado';\nresultado = 85;\n</code></pre>"},{"location":"Aprendizaje3/Front/Basico/JS%20y%20TS%20semana%202%20Gu%C3%ADa/#intersection-types","title":"Intersection Types","text":"<p>Combina m\u00faltiples tipos en uno solo.</p> <pre><code>type A = { x: number };\ntype B = { y: number };\ntype C = A &amp; B;\n\nlet punto: C = { x: 10, y: 20 };\n</code></pre>"},{"location":"Aprendizaje3/Front/Basico/JS%20y%20TS%20semana%202%20Gu%C3%ADa/#avanzando-con-typescript","title":"Avanzando con TypeScript","text":""},{"location":"Aprendizaje3/Front/Basico/JS%20y%20TS%20semana%202%20Gu%C3%ADa/#type-indexing","title":"Type Indexing","text":"<p>Permite acceder a los tipos de las propiedades de un objeto.</p> <pre><code>type Persona = { nombre: string; edad: number };\ntype Nombre = Persona['nombre']; // string\n</code></pre>"},{"location":"Aprendizaje3/Front/Basico/JS%20y%20TS%20semana%202%20Gu%C3%ADa/#obtener-tipos-de-valores-y-funciones","title":"Obtener Tipos de Valores y Funciones","text":"<ul> <li>typeof: Obtiene el tipo de una variable o funci\u00f3n.</li> </ul> <p><code>typescript   let saludo = 'Hola';   type TipoSaludo = typeof saludo; // string</code></p>"},{"location":"Aprendizaje3/Front/Basico/JS%20y%20TS%20semana%202%20Gu%C3%ADa/#arrays-en-typescript","title":"Arrays en TypeScript","text":"<p>Puedes tipar arrays indicando el tipo de sus elementos.</p> <pre><code>let numeros: number[] = [1, 2, 3];\n</code></pre> <p>O usando <code>Array&lt;T&gt;</code>:</p> <pre><code>let nombres: Array&lt;string&gt; = ['Ana', 'Luis', 'Pedro'];\n</code></pre>"},{"location":"Aprendizaje3/Front/Basico/JS%20y%20TS%20semana%202%20Gu%C3%ADa/#matrices-y-tuplas","title":"Matrices y Tuplas","text":"<ul> <li>Tuplas: Arrays de longitud y tipos definidos.</li> </ul> <p><code>typescript   let coordenadas: [number, number] = [10, 20];</code></p> <p>Recursos Adicionales:</p> <ul> <li>Documentaci\u00f3n de JavaScript (MDN)</li> <li>Documentaci\u00f3n de TypeScript</li> </ul>"},{"location":"Aprendizaje3/Front/Basico/Semana%201/","title":"Gu\u00eda de Aprendizaje: Introducci\u00f3n al Desarrollo Web con HTML y CSS","text":"<p>Ver video introductorio acerca de la programaci\u00f3n web, solo se ver\u00e1n las primeras 4 horas y media: Duraci\u00f3n del Curso: 4 horas y media</p> <p>Apoyarse del documento que interpreta el Curso:  Interpretaci\u00f3n del curso</p> <p>Curso: Curso de HTML y CSS desde CERO (Completo)</p>"},{"location":"Aprendizaje3/Front/Basico/Semana%201/#0000-0035-introduccion","title":"00:00 - 00:35 | Introducci\u00f3n","text":"<ul> <li>Descripci\u00f3n General:</li> <li>Presentaci\u00f3n del curso y sus objetivos.</li> <li>Explicaci\u00f3n de qu\u00e9 son HTML y CSS.</li> <li>Introducci\u00f3n al editor de texto que se utilizar\u00e1 durante el curso.</li> </ul>"},{"location":"Aprendizaje3/Front/Basico/Semana%201/#0035-0156-curso-introductorio-de-html-1-hora-y-21-minutos","title":"00:35 - 01:56 | Curso Introductorio de HTML (1 hora y 21 minutos)","text":"<ul> <li>Contenido:</li> <li>Fundamentos de HTML.</li> <li>Estructura b\u00e1sica de una p\u00e1gina web.</li> <li>Principales etiquetas HTML y su uso.</li> <li>Creaci\u00f3n de una p\u00e1gina HTML sencilla.</li> </ul>"},{"location":"Aprendizaje3/Front/Basico/Semana%201/#0156-0425-curso-introductorio-de-css-2-horas-y-29-minutos","title":"01:56 - 04:25 | Curso Introductorio de CSS (2 horas y 29 minutos)","text":"<ul> <li>Contenido:</li> <li>Fundamentos de CSS.</li> <li>Selectores b\u00e1sicos.</li> <li>Propiedades de texto y fuentes.</li> <li>Uso de tipograf\u00edas externas.</li> <li>Modelo de caja (Box Model).</li> <li>Bordes, m\u00e1rgenes y rellenos.</li> <li>Colores y unidades en CSS.</li> </ul>"},{"location":"Aprendizaje3/Front/Basico/Semana%201/#proyecto-practico","title":"Proyecto Pr\u00e1ctico","text":"<ul> <li>Descripci\u00f3n:</li> <li>Creaci\u00f3n de Tarjetas de Presentaci\u00f3n:<ul> <li>Dise\u00f1o y desarrollo de diferentes tarjetas utilizando HTML y CSS.</li> <li>Aplicaci\u00f3n de estilos como fondos, gradientes y sombras.</li> <li>Referencia al ejemplo presentado en la hora 5:31 del video.</li> </ul> </li> </ul>"},{"location":"Aprendizaje3/Front/Basico/semana%202/","title":"Semana 2: JavaScript y TypeScript","text":"<p>ver video acerca del uso de JS y TS  Duraci\u00f3n del Curso:</p> <p>4 horas</p> <p>Leer la guia interpretada del curso para apoyarse y en caso de existir dudas:</p> <p>JS y TS semana 2 Gu\u00eda</p> <p>videos:</p> <p>javascript</p> <p>typescript</p>"},{"location":"Aprendizaje3/Front/React/Introducci%C3%B3n/","title":"Introducci\u00f3n a React","text":""},{"location":"Aprendizaje3/Front/React/Introducci%C3%B3n/#que-es-react-ventajas-de-react","title":"\u00bfQu\u00e9 es React? Ventajas de React","text":"<p>React es una biblioteca de JavaScript desarrollada por Facebook para construir interfaces de usuario. No es un framework completo como Angular o Vue, sino que se enfoca en la capa de vista de una aplicaci\u00f3n.</p> <p>Ventajas de React:</p> <ul> <li>Componentes Reutilizables: Facilita la creaci\u00f3n de componentes modulares y reutilizables, lo que mejora la mantenibilidad y escalabilidad de las aplicaciones.</li> <li>Virtual DOM: Utiliza un DOM virtual para mejorar el rendimiento al minimizar las manipulaciones directas del DOM real.</li> <li>Unidireccionalidad de Datos: Promueve un flujo de datos unidireccional, lo que simplifica el seguimiento de cambios y el manejo del estado de la aplicaci\u00f3n.</li> <li>Gran Comunidad y Ecosistema: Cuenta con una amplia comunidad y numerosas herramientas, librer\u00edas y recursos disponibles.</li> </ul>"},{"location":"Aprendizaje3/Front/React/Introducci%C3%B3n/#conceptos-basicos-para-react","title":"Conceptos B\u00e1sicos para React","text":"<p>Antes de sumergirnos en React, es importante entender algunos conceptos clave:</p> <ul> <li>Componentes: Bloques de construcci\u00f3n fundamentales en React. Pueden ser clases o funciones que retornan elementos de React.</li> <li>JSX (JavaScript XML): Sintaxis que combina JavaScript con HTML, permitiendo escribir elementos de manera declarativa.</li> <li>Estado (State): Informaci\u00f3n que cambia con el tiempo y afecta la renderizaci\u00f3n de los componentes.</li> <li>Props (Propiedades): Par\u00e1metros que se pasan a los componentes para configurar su apariencia o comportamiento.</li> <li>Eventos: Mecanismo para manejar interacciones del usuario, como clics o entradas de texto.</li> </ul>"},{"location":"Aprendizaje3/Front/React/Introducci%C3%B3n/#descargar-e-instalar-nodejs","title":"Descargar e Instalar Node.js","text":"<p>Para trabajar con React, necesitamos tener instalado Node.js, ya que nos proporciona <code>npm</code> (Node Package Manager) para gestionar dependencias y paquetes.</p> <p>Pasos para la instalaci\u00f3n:</p> <ol> <li> <p>Descargar Node.js:</p> </li> <li> <p>Visita nodejs.org y descarga la versi\u00f3n LTS (Long Term Support) recomendada.</p> </li> <li> <p>Instalar Node.js:</p> </li> <li> <p>Sigue las instrucciones del instalador seg\u00fan tu sistema operativo.</p> </li> <li> <p>Aseg\u00farate de que la instalaci\u00f3n incluye <code>npm</code>.</p> </li> <li> <p>Verificar la Instalaci\u00f3n:</p> </li> <li> <p>Abre una terminal y ejecuta:</p> <p><code>bash  node -v  npm -v</code></p> </li> <li> <p>Deber\u00edas ver las versiones instaladas de Node.js y npm.</p> </li> </ol>"},{"location":"Aprendizaje3/Front/React/Introducci%C3%B3n/#documentacion-oficial-de-react","title":"Documentaci\u00f3n Oficial de React","text":"<p>Es fundamental familiarizarse con la documentaci\u00f3n oficial de React. All\u00ed encontrar\u00e1s gu\u00edas, tutoriales y referencias completas sobre la API de React.</p>"},{"location":"Aprendizaje3/Front/React/Introducci%C3%B3n/#introduccion-a-jsx","title":"Introducci\u00f3n a JSX","text":""},{"location":"Aprendizaje3/Front/React/Introducci%C3%B3n/#que-es-jsx","title":"\u00bfQu\u00e9 es JSX?","text":"<p>JSX es una extensi\u00f3n de sintaxis para JavaScript que permite escribir c\u00f3digo similar a HTML dentro de JavaScript. Aunque puede parecer que estamos escribiendo HTML, en realidad estamos escribiendo sintaxis de React que ser\u00e1 transformada en llamadas a la API de React mediante un compilador como Babel.</p> <p>Ejemplo de JSX:</p> <pre><code>const elemento = &lt;h1&gt;\u00a1Hola, Mundo!&lt;/h1&gt;;\n</code></pre>"},{"location":"Aprendizaje3/Front/React/Introducci%C3%B3n/#elementos-en-react","title":"Elementos en React","text":"<p>Un elemento en React es la unidad m\u00e1s peque\u00f1a de las aplicaciones React. Representa lo que se renderiza en la pantalla.</p> <p>Ejemplo:</p> <pre><code>const elemento = &lt;div className=\"contenedor\"&gt;Contenido&lt;/div&gt;;\n</code></pre>"},{"location":"Aprendizaje3/Front/React/Introducci%C3%B3n/#diferencias-entre-elemento-y-componente","title":"Diferencias entre Elemento y Componente","text":"<ul> <li>Elemento: Es un objeto simple que describe lo que se debe ver en pantalla. Es inmutable y representa un nodo del DOM.</li> <li>Componente: Es una funci\u00f3n o clase que puede aceptar entradas (props) y retorna un elemento de React.</li> </ul>"},{"location":"Aprendizaje3/Front/React/Introducci%C3%B3n/#introduccion-a-react-dom-y-el-dom","title":"Introducci\u00f3n a <code>react-dom</code> y el DOM","text":"<p><code>react-dom</code> es un paquete que proporciona m\u00e9todos espec\u00edficos para el DOM que permiten que React interact\u00fae con el DOM del navegador.</p> <ul> <li>DOM (Document Object Model): Es una interfaz de programaci\u00f3n que permite a los lenguajes manipular la estructura y estilo de los documentos HTML y XML.</li> </ul> <p>Renderizar un elemento en el DOM:</p> <pre><code>import React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst elemento = &lt;h1&gt;\u00a1Hola, React!&lt;/h1&gt;;\nReactDOM.render(elemento, document.getElementById('root'));\n</code></pre>"},{"location":"Aprendizaje3/Front/React/Introducci%C3%B3n/#elementos-html-que-se-pueden-usar","title":"Elementos HTML que se Pueden Usar","text":"<p>En JSX, puedes utilizar cualquier elemento HTML est\u00e1ndar, como <code>&lt;div&gt;</code>, <code>&lt;span&gt;</code>, <code>&lt;h1&gt;</code>, etc. Adem\u00e1s, puedes crear tus propios componentes.</p>"},{"location":"Aprendizaje3/Front/React/Introducci%C3%B3n/#como-reconocer-elementos-y-componentes","title":"C\u00f3mo Reconocer Elementos y Componentes","text":"<ul> <li>Elementos HTML: Se escriben en min\u00fasculas (<code>&lt;div&gt;</code>, <code>&lt;p&gt;</code>, <code>&lt;input&gt;</code>).</li> <li>Componentes de React: Se escriben con la primera letra en may\u00fascula (<code>&lt;MiComponente /&gt;</code>).</li> </ul>"},{"location":"Aprendizaje3/Front/React/Introducci%C3%B3n/#atributos-en-jsx","title":"Atributos en JSX","text":"<p>Los atributos en JSX se parecen mucho a los de HTML, pero hay algunas diferencias:</p> <ul> <li><code>class</code> se reemplaza por <code>className</code>.</li> <li><code>for</code> se reemplaza por <code>htmlFor</code>.</li> </ul> <p>Ejemplo:</p> <pre><code>const elemento = &lt;button className=\"btn\"&gt;Click aqu\u00ed&lt;/button&gt;;\n</code></pre>"},{"location":"Aprendizaje3/Front/React/Introducci%C3%B3n/#estructura-jsx-con-elementos-anidados","title":"Estructura JSX con Elementos Anidados","text":"<p>Puedes anidar elementos dentro de otros para crear estructuras m\u00e1s complejas.</p> <p>Ejemplo:</p> <pre><code>const elemento = (\n  &lt;div&gt;\n    &lt;h1&gt;T\u00edtulo&lt;/h1&gt;\n    &lt;p&gt;Este es un p\u00e1rrafo dentro de un div.&lt;/p&gt;\n  &lt;/div&gt;\n);\n</code></pre>"},{"location":"Aprendizaje3/Front/React/Introducci%C3%B3n/#como-renderizar-componentes-y-elementos","title":"C\u00f3mo Renderizar Componentes y Elementos","text":"<p>Para renderizar un componente, simplemente lo utilizas como si fuera un elemento JSX.</p> <p>Ejemplo de componente funcional:</p> <pre><code>function Bienvenida(props) {\n  return &lt;h1&gt;\u00a1Hola, {props.nombre}!&lt;/h1&gt;;\n}\n\nReactDOM.render(&lt;Bienvenida nombre=\"Mar\u00eda\" /&gt;, document.getElementById('root'));\n</code></pre>"},{"location":"Aprendizaje3/Front/React/Introducci%C3%B3n/#etiquetas-auto-cerradas-self-closing-tags","title":"Etiquetas Auto-Cerradas (Self-Closing Tags)","text":"<p>Algunos elementos HTML, como <code>&lt;img&gt;</code> o <code>&lt;input&gt;</code>, son auto-cerrados. En JSX, debes cerrarlos expl\u00edcitamente.</p> <p>Ejemplo:</p> <pre><code>const imagen = &lt;img src=\"imagen.jpg\" alt=\"Descripci\u00f3n\" /&gt;;\n</code></pre>"},{"location":"Aprendizaje3/Front/React/Introducci%C3%B3n/#insertar-javascript-en-jsx","title":"Insertar JavaScript en JSX","text":"<p>Puedes insertar expresiones JavaScript dentro de JSX utilizando llaves <code>{}</code>.</p> <p>Ejemplo:</p> <pre><code>const usuario = 'Carlos';\nconst elemento = &lt;h1&gt;\u00a1Hola, {usuario}!&lt;/h1&gt;;\n</code></pre> <p>Tambi\u00e9n puedes utilizar funciones o c\u00e1lculos:</p> <pre><code>const elemento = &lt;p&gt;La suma de 2 + 2 es {2 + 2}&lt;/p&gt;;\n</code></pre>"},{"location":"Aprendizaje3/Front/React/Introducci%C3%B3n/#estructura-inicial-del-proyecto","title":"Estructura Inicial del Proyecto","text":""},{"location":"Aprendizaje3/Front/React/Introducci%C3%B3n/#crear-la-estructura-basica-con-create-react-app","title":"Crear la Estructura B\u00e1sica con <code>create-react-app</code>","text":"<p>Para comenzar un nuevo proyecto de React de manera sencilla, utilizamos Create React App, una herramienta oficial que configura todo el entorno de desarrollo.</p> <p>Pasos para crear un nuevo proyecto:</p> <ol> <li>Instalar Create React App (opcional si usas npx):</li> </ol> <p><code>bash    npm install -g create-react-app</code></p> <ol> <li>Crear un nuevo proyecto:</li> </ol> <p><code>bash    npx create-react-app mi-aplicacion</code></p> <ol> <li>Ingresar al directorio del proyecto:</li> </ol> <p><code>bash    cd mi-aplicacion</code></p> <ol> <li>Iniciar el servidor de desarrollo:</li> </ol> <p><code>bash    npm start</code></p> <p>Esto abrir\u00e1 la aplicaci\u00f3n en <code>http://localhost:3000</code>.</p>"},{"location":"Aprendizaje3/Front/React/Introducci%C3%B3n/#estructura-de-carpetas-y-archivos","title":"Estructura de Carpetas y Archivos","text":"<ul> <li><code>src/</code>: Contiene el c\u00f3digo fuente de la aplicaci\u00f3n.</li> <li><code>index.js</code>: Punto de entrada principal.</li> <li><code>App.js</code>: Componente principal de la aplicaci\u00f3n.</li> <li><code>public/</code>: Contiene archivos est\u00e1ticos.</li> <li><code>package.json</code>: Lista de dependencias y scripts.</li> <li><code>node_modules/</code>: M\u00f3dulos instalados (no modificar).</li> </ul>"},{"location":"Aprendizaje3/Front/React/Introducci%C3%B3n/#recursos-adicionales","title":"Recursos Adicionales","text":"<ul> <li>Documentaci\u00f3n Oficial de React: https://reactjs.org/docs/getting-started.html</li> <li>Tutorial Interactivo de React: https://reactjs.org/tutorial/tutorial.html</li> <li>Gu\u00eda de Estilo de JSX: https://reactjs.org/docs/jsx-in-depth.html</li> <li>Create React App: https://create-react-app.dev/</li> </ul>"},{"location":"Aprendizaje3/General/Instalaci%C3%B3n%20de%20Git/","title":"Instalaci\u00f3n de Git","text":"<p>En la p\u00e1gina de descargas, haz clic en el bot\u00f3n \"Download for Windows\". Esto descargar\u00e1 un archivo ejecutable.</p> <p>[!Note] Importante Ver detenidamente el video para la correcta instalaci\u00f3n</p>"},{"location":"Aprendizaje3/General/Instalaci%C3%B3n%20de%20Git/#comandos-basicos","title":"Comandos B\u00e1sicos","text":""},{"location":"Aprendizaje3/General/Instalaci%C3%B3n%20de%20Git/#configuracion-inicial-de-git","title":"Configuraci\u00f3n Inicial de Git","text":"<p>Antes de comenzar a usar Git, es importante configurar tu informaci\u00f3n de usuario. Esto se hace una sola vez por m\u00e1quina.</p> <pre><code>git config --global user.name \"Tu Nombre\"\ngit config --global user.email \"tuemail@example.com\"\n</code></pre> <p>Puedes verificar tu configuraci\u00f3n actual con:</p>"},{"location":"Aprendizaje3/General/Instalaci%C3%B3n%20de%20Git/#clonar-un-repositorio-de-github","title":"Clonar un Repositorio de GitHub","text":"<p>Para trabajar en un proyecto existente, primero debes clonar el repositorio desde GitHub a tu m\u00e1quina local.</p> <pre><code>git clone https://github.com/usuario/nombre-del-repositorio.git\n</code></pre> <p>Reemplaza <code>usuario</code> y <code>nombre-del-repositorio</code> con los detalles correspondientes.</p>"},{"location":"Aprendizaje3/General/Instalaci%C3%B3n%20de%20Git/#crear-una-rama-branch","title":"Crear una Rama (<code>branch</code>)","text":"<p>Las ramas permiten trabajar en diferentes caracter\u00edsticas o correcciones sin afectar la rama principal (<code>main</code> o <code>master</code>).</p> <ul> <li>Crear una nueva rama:</li> </ul> <pre><code>git branch nombre-de-la-rama\n</code></pre> <ul> <li>Crear y cambiar a una nueva rama en un solo paso:</li> </ul> <pre><code>git checkout -b nombre-de-la-rama\n</code></pre> <p>Ejemplo</p> <pre><code>git checkout -b feature/nueva-funcionalidad\n</code></pre>"},{"location":"Aprendizaje3/General/Instalaci%C3%B3n%20de%20Git/#cambiar-de-rama","title":"Cambiar de Rama","text":"<p>Para cambiar a una rama existente:</p> <pre><code>git checkout nombre-de-la-rama\n</code></pre> <p>Ejemplo</p> <pre><code>git checkout main\n</code></pre>"},{"location":"Aprendizaje3/General/Instalaci%C3%B3n%20de%20Git/#agregar-cambios-git-add","title":"Agregar Cambios (<code>git add .</code>)","text":"<p>Este comando a\u00f1ade todos los cambios en el directorio actual al \u00e1rea de staging, prepar\u00e1ndolos para ser confirmados.</p> <pre><code>git add .\n</code></pre> <p>Explicaci\u00f3n:</p> <ul> <li>El <code>.</code> (punto) representa el directorio actual y todos sus subdirectorios. Puedes especificar archivos individuales si lo prefieres, por ejemplo: <code>git add archivo.js</code>.</li> </ul>"},{"location":"Aprendizaje3/General/Instalaci%C3%B3n%20de%20Git/#confirmar-cambios-commit","title":"Confirmar Cambios (<code>commit</code>)","text":"<p>Despu\u00e9s de agregar los cambios al \u00e1rea de staging, necesitas confirmarlos con un mensaje descriptivo.</p> <pre><code>git commit -m \"Descripci\u00f3n de los cambios realizados\"\n</code></pre> <p>Ejemplo:</p> <pre><code>git commit -m \"A\u00f1ade la funcionalidad de autenticaci\u00f3n de usuarios\"\n</code></pre>"},{"location":"Aprendizaje3/General/Instalaci%C3%B3n%20de%20Git/#enviar-cambios-al-repositorio-remoto-push","title":"Enviar Cambios al Repositorio Remoto (<code>push</code>)","text":"<p>Este comando env\u00eda tus confirmaciones locales al repositorio remoto en GitHub.</p> <pre><code>git push origin nombre-de-la-rama\n</code></pre> <p>Ejemplo:</p> <pre><code>git push origin feature/nueva-funcionalidad\n</code></pre> <p>Nota: Si es la primera vez que haces push a una nueva rama, puedes usar:</p> <pre><code>git push -u origin nombre-de-la-rama\n</code></pre> <p>Esto establece la rama remota como la rama de seguimiento predeterminada para la rama local.</p>"},{"location":"Aprendizaje3/General/Instalaci%C3%B3n%20de%20Git/#actualizar-el-repositorio-local-pull","title":"Actualizar el Repositorio Local (<code>pull</code>)","text":"<p>Para obtener y fusionar los cambios del repositorio remoto a tu rama local:</p> <pre><code>git pull origin nombre-de-la-rama\n</code></pre> <p>Ejemplo:</p> <pre><code>git pull origin main\n</code></pre>"},{"location":"Aprendizaje3/General/Requisitos%20Generales/","title":"Instalar Visual Studio Code","text":"<p>Link de descarga:  https://code.visualstudio.com/download</p> <p>Haz clic en el bot\u00f3n \"Download for Windows\". Esto descargar\u00e1 un archivo ejecutable, generalmente nombrado <code>VSCodeSetup.exe</code>.</p>"},{"location":"Aprendizaje3/General/Requisitos%20Generales/#crear-cuenta-de-github","title":"Crear cuenta de Github","text":"<p>Link de la pagina:  https://github.com/</p> <p>Registrarse en caso de no tener una cuenta con anterioridad </p>"},{"location":"Aprendizaje3/General/Requisitos%20Generales/#instalar-nodejs","title":"Instalar Node.js","text":"<p>Node.js es un entorno de ejecuci\u00f3n de JavaScript que te permite ejecutar c\u00f3digo JavaScript fuera del navegador.</p> <p>Link de descarga: https://nodejs.org/. Seleccionar la Versi\u00f3n LTS (Long Term Support) Una vez completada la instalaci\u00f3n, marca la casilla \"Automatically install the necessary tools...\"</p> <p>Verificar la Instalaci\u00f3n Presiona <code>Win + R</code>, escribe <code>cmd</code> y presiona <code>Enter</code> para abrir el S\u00edmbolo del sistema. Escribe:</p> <pre><code>node -v\n</code></pre> <p>Deber\u00edas ver la versi\u00f3n de Node.js instalada, por ejemplo, <code>v18.16.0</code>.</p> <p>Escribe el siguiente comando y presiona <code>Enter</code>:</p> <pre><code>npm -v\n</code></pre> <p>Deber\u00edas ver la versi\u00f3n de npm instalada, por ejemplo, <code>9.5.0</code>.</p>"},{"location":"Aprendizaje3/General/Requisitos%20Generales/#instalar-git","title":"Instalar Git","text":"<p>Git es un sistema de control de versiones distribuido que te permite gestionar y seguir los cambios en tu c\u00f3digo fuente durante el desarrollo de proyectos.</p> <p>link de descarga: https://git-scm.com/downloads leer para la instalaci\u00f3n: Instalaci\u00f3n de Git</p>"},{"location":"Aprendizaje3/General/Requisitos%20Generales/#crear-cuenta-de-jira","title":"Crear cuenta de Jira","text":"<p>Jira\u00a0es un producto de\u00a0software propietario\u00a0para la\u00a0gesti\u00f3n de proyectos,\u00a0seguimiento de errores\u00a0e\u00a0incidencias.</p> <p>Link de la pagina: Jira | Software de seguimiento de proyectos e incidencias | Atlassian Crear cuenta en caso de no tener</p>"},{"location":"Aprendizaje3/General/Requisitos%20Generales/#instalacion-de-dbeaver","title":"Instalaci\u00f3n de DBeaver","text":"<p>DBeaver es una herramienta universal de base de datos de c\u00f3digo abierto que soporta una amplia variedad de sistemas de gesti\u00f3n de bases de datos (SGBD).</p> <p>Link de descarga: https://dbeaver.io/download/ En la secci\u00f3n de descargas, encontrar\u00e1s diferentes versiones de DBeaver. La versi\u00f3n Community Edition es la que elegir\u00e1s . instalador: https://dbeaver.io/files/dbeaver-ce-latest-x86_64-setup.exe</p> <p>Puedes instalar cualquier visualizador de base de datos que quieras.</p> <p>Despu\u00e9s de esto puedes ir al introductorio de  nest o html y css</p>"}]}